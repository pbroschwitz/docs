{
	"info": {
		"_postman_id": "f14a3f4c-ec88-4927-ba85-31fb3511a75a",
		"name": "GRNRY 1.0 Aretha",
		"description": "Granary 1.0 Aretha Postman Collection.\nSee [docs](https://docs.grnry.io/) for more information about the APIs and the Platform in general.\n\nTo update the variables in this collection use the preferred way of overwritting them with your own postman environment.\nCheck out the Collections Variables to see what is there to overwrite.\n\n\nError Code documentation can be found [here](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/api-error-codes).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Snowplow API",
			"item": [
				{
					"name": "Tracker endpoint GET",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{snowplow_url}}/api/com.snowplowanalytics.snowplow/tp2",
							"host": [
								"{{snowplow_url}}"
							],
							"path": [
								"api",
								"com.snowplowanalytics.snowplow",
								"tp2"
							],
							"query": [
								{
									"key": "param1",
									"value": "test",
									"disabled": true
								},
								{
									"key": "param2",
									"value": "test",
									"disabled": true
								},
								{
									"key": "param3",
									"value": "test",
									"disabled": true
								}
							]
						},
						"description": "[Docs]()\n\nEvent parameters should be appended to the end of each request.\nExample:\n```\nhttps://api.grnry.io/api/com.snowplowanalytics.snowplow/tp2?f_java=1&aid=lcePrices&tv=js-0.26.1&e=pv&ds=1105x390&cookie=1\n```"
					},
					"response": []
				},
				{
					"name": "Tracker endpoint POST",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n\t{\n\t  \"correlationId\": \"a\",\n\t  \"filterCriteria\": \"harvester_criteria\"    \n\t}\n ]\n}\n"
						},
						"url": {
							"raw": "{{snowplow_url}}/api/com.snowplowanalytics.snowplow/tp2",
							"host": [
								"{{snowplow_url}}"
							],
							"path": [
								"api",
								"com.snowplowanalytics.snowplow",
								"tp2"
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/snowplow-api-endpoints#tracker-endpoint-post)\n\nEvent parameters should be added into the body as String.Example JSON body:\n```\n{\"id\" : \"1234\", \"tsa\": \"test\"}\n```"
					},
					"response": []
				}
			],
			"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/snowplow-api-endpoints)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Harvester API",
			"item": [
				{
					"name": "/event-types",
					"item": [
						{
							"name": "/persisters",
							"item": [
								{
									"name": "Get Persister for a Specific Event Type",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{harvester_url}}/event-types/:event-type-name/eventstores/:eventstore-type/persister",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"event-types",
												":event-type-name",
												"eventstores",
												":eventstore-type",
												"persister"
											],
											"query": [
												{
													"key": "export",
													"value": null,
													"description": "if set to \"true\" (not case sensitive), the persister response will only contain properties that are not set to default values or generated by the api. Default is \"\".",
													"disabled": true
												},
												{
													"key": "expand",
													"value": null,
													"description": "Expand the response with state to show the persister state. Default is \"\".",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "event-type-name",
													"value": "",
													"description": "Name of the event type."
												},
												{
													"key": "eventstore-type",
													"value": "pg",
													"description": "Name of the event store. Default pg"
												}
											]
										},
										"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/event-type-endpoints#get-persister-for-a-specific-event-type)\n\nGet the persister of an event type.\nThis request requires the role matching either `consumer` or `editor`. If `consumer` is null, any authenticated user is authorized."
									},
									"response": []
								},
								{
									"name": "Update persister config",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"appVersion\": \"0.10.0\",\n    \"appConfig\": {\n        \"eventstore.tableName\": \"public.eventstore\",\n        \"spring.datasource.url\": \"jdbc:postgresql://grnry-pg-citus:5432/postgres?currentSchema=public\",\n        \"spring.datasource.password\": \"${superuser-password}\",\n        \"spring.datasource.username\": \"${superuser-username}\",\n        \"spring.cloud.kubernetes.secrets.paths\": \"/usr/src/app/db-secret\",\n        \"spring.cloud.stream.bindings.input.consumer.concurrency\": \"6\",\n        \"spring.cloud.stream.bindings.input.consumer.partitioned\": \"true\"\n    },\n    \"deployerConfig\": {\n        \"kubernetes.volumes\": \"[{name: 'secret', secret: { secretName : 'grnry-base-encryption-token' , defaultMode : '256' }}, {name: 'db-secret', secret: { secretName : 'grnry-pg-citus-secret' , defaultMode : '256' }}]\",\n        \"kubernetes.limits.cpu\": \"700m\",\n        \"kubernetes.requests.cpu\": \"700m\",\n        \"kubernetes.volumeMounts\": \"[{name: 'secret', mountPath: '/usr/src/app/rsa_privatekey.key' , subPath: 'rsa_privatekey.key' , readOnly : 'true' },{name: 'secret', mountPath: '/usr/src/app/rsa_publickey.key' , subPath: 'rsa_publickey.key' , readOnly : 'true' }, {name: 'db-secret', mountPath: '/usr/src/app/db-secret' , readOnly : 'true' }]\",\n        \"kubernetes.limits.memory\": \"512Mi\",\n        \"kubernetes.imagePullPolicy\": \"Always\",\n        \"kubernetes.requests.memory\": \"512Mi\",\n        \"kubernetes.livenessProbeDelay\": \"120\",\n        \"kubernetes.readinessProbeDelay\": \"120\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{harvester_url}}/event-types/:event-type-name/eventstores/:eventstore-type/persister",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"event-types",
												":event-type-name",
												"eventstores",
												":eventstore-type",
												"persister"
											],
											"query": [
												{
													"key": "imported",
													"value": "",
													"description": "if set to \"true\" (not case sensitive), the persister default values will be merged into the provided PUT body while keeping the custom values if provided.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "event-type-name",
													"value": "",
													"description": "Name of the event type."
												},
												{
													"key": "eventstore-type",
													"value": "pg",
													"description": "Name of the event store. Default pg."
												}
											]
										},
										"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/event-type-endpoints#update-persister-config-for-a-specific-event-type)\n\nUpdates the persister configuration of a specific event type.\nThis request requires the role matching `editor`."
									},
									"response": []
								},
								{
									"name": "Get State of a Persister for a Specific Event Type",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{harvester_url}}/event-types/:event-type-name/eventstores/:eventstore-type/persister/state",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"event-types",
												":event-type-name",
												"eventstores",
												":eventstore-type",
												"persister",
												"state"
											],
											"variable": [
												{
													"key": "event-type-name",
													"value": "",
													"description": "Name of the event type."
												},
												{
													"key": "eventstore-type",
													"value": "pg",
													"description": "Name of the event store. Default pg"
												}
											]
										},
										"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/event-type-endpoints#get-state-of-a-persister-for-a-specific-event-type)\n\nGet the current state of a persister for an event type.\nThis request requires a role matching `editor` or `consumer`. If `consumer` is null, any authenticated user is authorized."
									},
									"response": []
								},
								{
									"name": "Start/Stop Persister for a Specific Event Type",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"action\": \"START\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{harvester_url}}/event-types/:event-type-name/eventstores/:eventstore-type/persister/state",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"event-types",
												":event-type-name",
												"eventstores",
												":eventstore-type",
												"persister",
												"state"
											],
											"variable": [
												{
													"key": "event-type-name",
													"value": "",
													"description": "Name of the event type."
												},
												{
													"key": "eventstore-type",
													"value": "pg",
													"description": "Name of the event store. Default pg"
												}
											]
										},
										"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/event-type-endpoints#start-stop-persister-for-a-specific-event-type)\n\nStart or stop the state of a persister for an event type.\nThis request requires the role matching `editor`."
									},
									"response": []
								},
								{
									"name": "Get Persister Logs for a Specific Event Type",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{harvester_url}}/event-types/:event-type-name/eventstores/:eventstore-type/persister/logs",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"event-types",
												":event-type-name",
												"eventstores",
												":eventstore-type",
												"persister",
												"logs"
											],
											"query": [
												{
													"key": "lines",
													"value": "500",
													"description": "The last x lines of the log (if available).\nValid value are : 1 .. 500. Default: 500.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "event-type-name",
													"value": "",
													"description": "Name of the event-type."
												},
												{
													"key": "eventstore-type",
													"value": "pg",
													"description": "Name of the event store. Default pg"
												}
											]
										},
										"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/event-type-endpoints#get-persister-logs-for-a-specific-event-type)\n\nGet the logs from a persister of an event type.\nThis request requires the role matching `editor` or `consumer`. If `consumer` is null, any authenticated user is authorized."
									},
									"response": []
								}
							]
						},
						{
							"name": "Get all event types",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{harvester_url}}/event-types",
									"host": [
										"{{harvester_url}}"
									],
									"path": [
										"event-types"
									],
									"query": [
										{
											"key": "search",
											"value": "example-event",
											"description": "Filter event types by displaynames containing this search term Default is \"\".",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "",
											"description": "Offset of the requested page. Default is 0. Must be a whole multiple of pagesize.",
											"disabled": true
										},
										{
											"key": "pagesize",
											"value": "",
											"description": "Number of event types returned per page. Default is 20.",
											"disabled": true
										},
										{
											"key": "expand",
											"value": "totalCount,persisters",
											"description": "Expand the response with totalCount, or persisters to show either the count or the peristers of different event-type-names. Default is \"\".",
											"disabled": true
										}
									]
								},
								"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/event-type-endpoints#get-all-event-types)\n\n\nReturns a list of all event types (latest version of each event type)\nThis request will return all event types, which `consumer` or `editor` matches the or one of the requester's role(s). if `consumer` is null, every authenticated user is authorized to see the entity."
							},
							"response": []
						},
						{
							"name": "Get all version of an Event Type",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{harvester_url}}/event-types/:event-type-name",
									"host": [
										"{{harvester_url}}"
									],
									"path": [
										"event-types",
										":event-type-name"
									],
									"variable": [
										{
											"key": "event-type-name",
											"value": "",
											"description": "Name of the event type."
										}
									]
								},
								"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/event-type-endpoints#get-all-versions-of-an-event-type)\n\nGet all versions of a given event type. \nThis request will return all versions, if  `consumer` or `editor` matches the requester's role. If `consumer` is null, every authenticated user is authorized."
							},
							"response": []
						},
						{
							"name": "Get a Specific Version of an Event Type",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{harvester_url}}/event-types/:event-type-name/:version",
									"host": [
										"{{harvester_url}}"
									],
									"path": [
										"event-types",
										":event-type-name",
										":version"
									],
									"query": [
										{
											"key": "export",
											"value": "true",
											"description": "If set to \"true\" or \"True\", the event type response will only contain properties a POST body must contain to create this exact event type. All properties set to default values and all api-generated properties will be omitted. Default is \"\".",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "event-type-name",
											"value": "",
											"description": "Name of the event type"
										},
										{
											"key": "version",
											"value": "",
											"description": "The version of the event type, or \"latest\" to get the latest version"
										}
									]
								},
								"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/event-type-endpoints#get-a-specific-version-of-an-event-type)\n\nGet one version of an event type.\nVersion should be \"latest\" or a valid number greater than or equals to 1.\nThis request requires the role matching `consumer` or `editor` field of the event type. If `consumer` is not set, any authenticated user is authorized."
							},
							"response": []
						},
						{
							"name": "Create an Event Type",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"displayName\": \"customers\",\n\t\"description\": \"Customers Event Type\",\n\t\"eventIdExpression\": \"#randomUUID()\",\n\t\"timestampExpression\": \"#nowMillis()\",\n\t\"correlationIdExpression\": \"#randomUUID()\",\n\t\"eventstoreTTL\": \"P100Y\",\n\t\"replication\": 3,\n\t\"partitonCount\": 32,\n\t\"retentionMs\": 345600000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{harvester_url}}/event-types",
									"host": [
										"{{harvester_url}}"
									],
									"path": [
										"event-types"
									]
								},
								"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/event-type-endpoints#create-an-event-type)\n\nAny authorized user is authorized to create event types. Be aware that you will not be able to update the entity afterwards if your account does not have the role set in editor."
							},
							"response": []
						},
						{
							"name": "Update existing event-type",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"displayName\": \"customers\",\n    \"description\": \"Customers Event Type\",\n    \"eventIdExpression\": \"#randomUUID()\",\n    \"timestampExpression\": \"#nowMillis()\",\n    \"correlationIdExpression\": \"#randomUUID()\",\n    \"eventstoreTTL\": \"P100Y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{harvester_url}}/event-types/:event-type-name",
									"host": [
										"{{harvester_url}}"
									],
									"path": [
										"event-types",
										":event-type-name"
									],
									"variable": [
										{
											"key": "event-type-name",
											"value": "",
											"description": "Name of the event type."
										}
									]
								},
								"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/event-type-endpoints#update-an-event-type)\n\nFully or partially updates an event type.\nThis requires the requester to assume roles that match the `editor` field. If no delta was recognized, no update will be made and HTTP 304 will be returned.\n\nImmutable fields (like type, partitionCount,.. ) can be part of the request body, but their values need to match the current values, otherwise an error is raised."
							},
							"response": []
						},
						{
							"name": "Delete event-type",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{harvester_url}}/event-types/:event-type-name",
									"host": [
										"{{harvester_url}}"
									],
									"path": [
										"event-types",
										":event-type-name"
									],
									"variable": [
										{
											"key": "event-type-name",
											"value": "",
											"description": "Name of the event type to be deleted"
										}
									]
								},
								"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/event-type-endpoints#delete-an-event-type)\n\nDeletes all versions of the given event type, if it is not used by registered belts. This request requires the role matching `editor` field."
							},
							"response": []
						}
					]
				},
				{
					"name": "/harvesters",
					"item": [
						{
							"name": "/source-types",
							"item": [
								{
									"name": "Get all source types",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{harvester_url}}/harvesters/source-types",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"source-types"
											],
											"query": [
												{
													"key": "search",
													"value": "test",
													"description": "Filter source types by names containing this search term Default is \"\".\n",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Offset of the requested page. Default is 0. Must be a whole multiple of pagesize. \n",
													"disabled": true
												},
												{
													"key": "pagesize",
													"value": "20",
													"description": "Number of source types returned per page. Default is 20.\n",
													"disabled": true
												}
											]
										},
										"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/source-type-endpoints#get-all-source-types)\n\nGet latest version of all source-types.\nThis request requires the role `source_type_read`."
									},
									"response": []
								},
								{
									"name": "Get all versions of an source type",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{harvester_url}}/harvesters/source-types/:source_type_name",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"source-types",
												":source_type_name"
											],
											"query": [
												{
													"key": "pagesize",
													"value": "20",
													"description": "Number of source types returned per page. Default is\n20 .\n",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Offset of the requested page. Default is 0 . Must be a whole multiple of pagesize.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "source_type_name",
													"value": "",
													"description": "Name of the source type.\n"
												}
											]
										},
										"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/source-type-endpoints#get-all-versions-of-an-source-type)\n\n\nGet all versions of a given source type.\nThis request requires the role `source_type_read`."
									},
									"response": []
								},
								{
									"name": "Get a specific version of an source type",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{harvester_url}}/harvesters/source-types/:source-type-name/:version",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"source-types",
												":source-type-name",
												":version"
											],
											"query": [
												{
													"key": "export",
													"value": "false",
													"description": "if set to \"true\" (not case sensitive), the event type response will only contain properties that a POST body must necessarily contain to create this exact event type. All properties set to default values and all api generated values will be omitted. (Only the api-generated name field will be provided). Default is \"\".\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "source-type-name",
													"value": "",
													"description": "Name of the source type.\n"
												},
												{
													"key": "version",
													"value": "",
													"description": "Version of the source type.\n"
												}
											]
										},
										"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/source-type-endpoints#get-a-specific-version-of-source-type)\n\nGet one version of a source type.\nThis request requires the role `source_type_read`."
									},
									"response": []
								}
							]
						},
						{
							"name": "/instances",
							"item": [
								{
									"name": "List all  Harvester Instances",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{harvester_url}}/harvesters/instances",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"instances"
											],
											"query": [
												{
													"key": "search",
													"value": "",
													"description": "Filter harvester list by name. Default: \"\"\n",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "state",
													"description": "Include all harvesters' states with expand=state in response body.\n",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Start offset. Default: 0. Must be a whole multiple of pagesize.\n",
													"disabled": true
												},
												{
													"key": "pagesize",
													"value": "20",
													"description": "Number of harvesters returned, default is 20. Maximum is 250.",
													"disabled": true
												}
											]
										},
										"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/harvester-instance-endpoints#get-all-harvester-instances)\n\nreturns a pageable list of all harvesters. Requires role `harvester_read`."
									},
									"response": []
								},
								{
									"name": "Get Harvester details",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{harvester_url}}/harvesters/instances/:harvester-name",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"instances",
												":harvester-name"
											],
											"query": [
												{
													"key": "export",
													"value": "false",
													"description": "if set to \"true\" (not case sensitive), the harvester response will only contain properties that a POST body must necessarily contain to create this exact harvester. All properties set to default values and all api-generated properties will be omitted. (Only the api-generated name field will be provided). Default is \"\"",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "state",
													"description": "Show Harvester state with expand=state.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "harvester-name",
													"value": "",
													"description": "technical name of harvester\n"
												}
											]
										},
										"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/harvester-instance-endpoints#get-harvester-details)\n\nReturns all details of a given harvester. Requires role `harvester_read`."
									},
									"response": []
								},
								{
									"name": "Create Harvester Instance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"harvester-post\",\n    \"displayName\": \"Harvester Post\",\n    \"streamName\": \"g-h-harvester-demo\",\n    \"dlqTopic\": \"grnry_harvester_dlq_harvester-post\",\n    \"sourceType\": {\n        \"name\": \"grnry-jdbc\",\n        \"version\": \"latest\",\n        \"configuration\": {\n            \"password\": \"secret\",\n            \"username\": \"su\",\n            \"hostname\": \"beefy-db-host\"\n        },\n        \"deploymentConfiguration\": {\n            \"kubernetes.volumes\": \"[{name: 'secret', secret: { secretName : 'grnry-base-encryption-token' , defaultMode : '256' }}]\",\n            \"kubernetes.limits.cpu\": \"400m\",\n            \"kubernetes.requests.cpu\": \"400m\",\n            \"kubernetes.volumeMounts\": \"[{name: 'secret', mountPath: '/usr/src/app/rsa_privatekey.key' , subPath: 'rsa_privatekey.key' , readOnly : 'true' },{name: 'secret', mountPath: '/usr/src/app/rsa_publickey.key' , subPath: 'rsa_publickey.key' , readOnly : 'true' }]\",\n            \"kubernetes.limits.memory\": \"512Mi\",\n            \"kubernetes.imagePullPolicy\": \"Always\",\n            \"kubernetes.requests.memory\": \"512Mi\",\n            \"kubernetes.livenessProbeDelay\": \"120\",\n            \"kubernetes.readinessProbeDelay\": \"120\"\n        }\n    },\n    \"metadataExtractor\": {\n        \"app\": \"grnry-data-in-metadata\",\n        \"version\": \"1\"\n    },\n    \"transform\": {\n        \"app\": \"grnry-scriptable\",\n        \"version\": \"2\",\n        \"language\": \"groovy\",\n        \"script\": \"return new String(payload , 'UTF-8');\"\n    },\n    \"sessionizing\": {\n        \"app\": \"grnry-sessionizing\",\n        \"version\": \"latest\",\n        \"correlationIdExpression\": \"headers['grnry-correlation-id']\",\n        \"sessionizingAttributeExpression\": \"\",\n        \"inactivityGapSec\": 1800,\n        \"gracePeriodSec\": 120,\n        \"enabled\": true\n    },\n    \"eventType\": {\n        \"name\": \"snowplow-a\",\n        \"version\": \"latest\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{harvester_url}}/harvesters/instances",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"instances"
											],
											"query": [
												{
													"key": "imported",
													"value": "false",
													"description": "if set to \"true\" (not case sensitive), the harvester default values will be merged into the provided POST body while keeping the custom values if provided.",
													"disabled": true
												}
											]
										},
										"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/harvester-instance-endpoints#create-harvester)\n\n\nCreates a new harvester instance. A technical name for the harvester instance will be derived from given `displayName` by removing all special characters, replacing white spaces with hyphens and limiting the length to 20 characters. Should the created harvester name be already in use the last four characters will be replaced by a suffix of numbers.\n\nSource type and event type are referenced by `name` and `version` in event_types and source_types tables. If no configuration properties are set under `sourceType` (resp. `eventType`) configuration from these entities will be applied.\n\nRequires the role `harvester_edit`."
									},
									"response": []
								},
								{
									"name": "Create Harvester Instance with name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"harvester-post\",\n    \"displayName\": \"Harvester Post\",\n    \"streamName\": \"g-h-harvester-demo\",\n    \"dlqTopic\": \"grnry_harvester_dlq_harvester-post\",\n    \"sourceType\": {\n        \"name\": \"grnry-jdbc\",\n        \"version\": \"latest\",\n        \"configuration\": {\n            \"password\": \"secret\",\n            \"username\": \"su\",\n            \"hostname\": \"beefy-db-host\"\n        },\n        \"deploymentConfiguration\": {\n            \"kubernetes.volumes\": \"[{name: 'secret', secret: { secretName : 'grnry-base-encryption-token' , defaultMode : '256' }}]\",\n            \"kubernetes.limits.cpu\": \"400m\",\n            \"kubernetes.requests.cpu\": \"400m\",\n            \"kubernetes.volumeMounts\": \"[{name: 'secret', mountPath: '/usr/src/app/rsa_privatekey.key' , subPath: 'rsa_privatekey.key' , readOnly : 'true' },{name: 'secret', mountPath: '/usr/src/app/rsa_publickey.key' , subPath: 'rsa_publickey.key' , readOnly : 'true' }]\",\n            \"kubernetes.limits.memory\": \"512Mi\",\n            \"kubernetes.imagePullPolicy\": \"Always\",\n            \"kubernetes.requests.memory\": \"512Mi\",\n            \"kubernetes.livenessProbeDelay\": \"120\",\n            \"kubernetes.readinessProbeDelay\": \"120\"\n        }\n    },\n    \"metadataExtractor\": {\n        \"app\": \"grnry-data-in-metadata\",\n        \"version\": \"1\"\n    },\n    \"transform\": {\n        \"app\": \"grnry-scriptable\",\n        \"version\": \"2\",\n        \"language\": \"groovy\",\n        \"script\": \"return new String(payload , 'UTF-8');\"\n    },\n    \"sessionizing\": {\n        \"app\": \"grnry-sessionizing\",\n        \"version\": \"latest\",\n        \"correlationIdExpression\": \"headers['grnry-correlation-id']\",\n        \"sessionizingAttributeExpression\": \"\",\n        \"inactivityGapSec\": 1800,\n        \"gracePeriodSec\": 120,\n        \"enabled\": true\n    },\n    \"eventType\": {\n        \"name\": \"snowplow-a\",\n        \"version\": \"latest\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{harvester_url}}/harvesters/instances/:harvester-name",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"instances",
												":harvester-name"
											],
											"query": [
												{
													"key": "imported",
													"value": "false",
													"description": "if set to \"true\" (not case sensitive), the harvester default values will be merged into the provided POST body while keeping the custom values if provided.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "harvester-name",
													"value": "",
													"description": "OPTIONAL: unique technical harvester name\n\n"
												}
											]
										},
										"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/harvester-instance-endpoints#create-harvester)\n\n\nCreates a new harvester instance. A technical name for the harvester instance will be derived from given `displayName` by removing all special characters, replacing white spaces with hyphens and limiting the length to 20 characters. Should the created harvester name be already in use the last four characters will be replaced by a suffix of numbers.\n\nSource type and event type are referenced by `name` and `version` in event_types and source_types tables. If no configuration properties are set under `sourceType` (resp. `eventType`) configuration from these entities will be applied.\n\nRequires the role `harvester_edit`."
									},
									"response": []
								},
								{
									"name": "Update Harvester",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"harvester-post\",\n    \"displayName\": \"Harvester Post Update\",\n    \"streamName\": \"g-h-harvester-demo\",\n    \"dlqTopic\": \"grnry_harvester_dlq_harvester-post\",\n    \"sourceType\": {\n        \"name\": \"grnry-jdbc\",\n        \"version\": \"latest\",\n        \"configuration\": {\n            \"password\": \"secret\",\n            \"username\": \"su\",\n            \"hostname\": \"beefy-db-host\"\n        },\n        \"deploymentConfiguration\": {\n            \"kubernetes.volumes\": \"[{name: 'secret', secret: { secretName : 'grnry-base-encryption-token' , defaultMode : '256' }}]\",\n            \"kubernetes.limits.cpu\": \"400m\",\n            \"kubernetes.requests.cpu\": \"400m\",\n            \"kubernetes.volumeMounts\": \"[{name: 'secret', mountPath: '/usr/src/app/rsa_privatekey.key' , subPath: 'rsa_privatekey.key' , readOnly : 'true' },{name: 'secret', mountPath: '/usr/src/app/rsa_publickey.key' , subPath: 'rsa_publickey.key' , readOnly : 'true' }]\",\n            \"kubernetes.limits.memory\": \"512Mi\",\n            \"kubernetes.imagePullPolicy\": \"Always\",\n            \"kubernetes.requests.memory\": \"512Mi\",\n            \"kubernetes.livenessProbeDelay\": \"120\",\n            \"kubernetes.readinessProbeDelay\": \"120\"\n        }\n    },\n    \"metadataExtractor\": {\n        \"app\": \"grnry-data-in-metadata\",\n        \"version\": \"1\"\n    },\n    \"transform\": {\n        \"app\": \"grnry-scriptable\",\n        \"version\": \"2\",\n        \"language\": \"groovy\",\n        \"script\": \"return new String(payload , 'UTF-8');\"\n    },\n    \"sessionizing\": {\n        \"app\": \"grnry-sessionizing\",\n        \"version\": \"latest\",\n        \"correlationIdExpression\": \"headers['grnry-correlation-id']\",\n        \"sessionizingAttributeExpression\": \"\",\n        \"inactivityGapSec\": 1800,\n        \"gracePeriodSec\": 120,\n        \"enabled\": true\n    },\n    \"eventType\": {\n        \"name\": \"snowplow-a\",\n        \"version\": \"latest\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{harvester_url}}/harvesters/instances/:havester-name",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"instances",
												":havester-name"
											],
											"query": [
												{
													"key": "expand",
													"value": "state",
													"description": "Show Harvester state with expand=state.\n",
													"disabled": true
												},
												{
													"key": "imported",
													"value": "true",
													"description": "if set to \"true\" (not case sensitive), the harvester default values will be merged into the provided PUT body while keeping the custom values if provided.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "havester-name",
													"value": ""
												}
											]
										},
										"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/harvester-instance-endpoints#update-harvester-instance)\n\nUpdates a harvester instance. All body parameters are optional. Harvester name field name is not changeable and will be ignored if provided. Empty fields will be set to \"\", missing fields will remain unchanged. It is not possible to replace apps (sourceType, metadataExtractor, transform), only their versions and configs are modifiable.\n\nRequires the role harvester_edit."
									},
									"response": []
								},
								{
									"name": "Delete Harvester",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{harvester_url}}/harvesters/instances/:harvester-name",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"instances",
												":harvester-name"
											],
											"variable": [
												{
													"key": "harvester-name",
													"value": "",
													"description": "Technical name of the Harvester.\n"
												}
											]
										},
										"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/harvester-instance-endpoints#delete-a-harvester-instance)\n\nDeletes the given Harvester. If it is still running, it will automatically stopped before deletion.\nThis request requires the role `harvester_edit`."
									},
									"response": []
								},
								{
									"name": "Get Harvester State",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{harvester_url}}/harvesters/instances/:havester-name/state",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"instances",
												":havester-name",
												"state"
											],
											"query": [
												{
													"key": "search",
													"value": "test",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "",
													"disabled": true
												},
												{
													"key": "pagesize",
													"value": "",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "havester-name",
													"value": "",
													"description": "Technical name of the harvester."
												}
											]
										},
										"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/harvester-instance-endpoints#get-harvester-instance-state)\n\nGet the current state of a harvester instance.\nThis request required the role `harvester_read`."
									},
									"response": []
								},
								{
									"name": "Start/Stop Harvester",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"action\": \"START\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{harvester_url}}/harvesters/instances/:havester-name/state",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"instances",
												":havester-name",
												"state"
											],
											"variable": [
												{
													"key": "havester-name",
													"value": "",
													"description": "technical name of the Harvester.\n"
												}
											]
										},
										"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/harvester-instance-endpoints#start-stop-harvester-instance)\n\nStart or stop the state of the given Harvester.\nThis request requires the roles  `harvester_edit`."
									},
									"response": []
								},
								{
									"name": "Get Harvester Logs",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{harvester_url}}/harvesters/instances/:harvester-name/logs/:step-name",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"instances",
												":harvester-name",
												"logs",
												":step-name"
											],
											"query": [
												{
													"key": "lines",
													"value": "500",
													"description": "Maximum number of lines the log should contain. Default 500",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "harvester-name",
													"value": "",
													"description": "Name of the Harvester Instance"
												},
												{
													"key": "step-name",
													"value": "sourceType",
													"description": "Name of the Harvester Step.  The name must be sourceType, transform, or metadataExtractor."
												}
											]
										},
										"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api/harvester-instance-endpoints#get-harvester-instance-logs)\n\nGet the logs of a specific Step of a specific Harvester Instance.\nThis request requires the role `harvester_read`."
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/harvester-api)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Event Store API",
			"item": [
				{
					"name": "Get Events by Correlation ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{event_store_url}}/events/:correlationId",
							"host": [
								"{{event_store_url}}"
							],
							"path": [
								"events",
								":correlationId"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Valid values are \"message\" and \"totalCount\".",
									"disabled": true
								},
								{
									"key": "from",
									"value": "1970-01-01T00:00:00Z",
									"description": "Timestamp encoded in ISO notation yyyy-MM-dd'T'hh:MM:ss'Z'. Defaults to 1970-01-01T00:00:00Z",
									"disabled": true
								},
								{
									"key": "to",
									"value": "2038-01-01T00:00:00Z",
									"description": "Timestamp encoded in ISO notation yyyy-MM-dd'T'hh:MM:ss'Z'. Defaults to now()",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Number of elements to be skipped. Defaults to 0",
									"disabled": true
								},
								{
									"key": "pagesize",
									"value": "20",
									"description": "Number of elements to be shown. Defaults to 20",
									"disabled": true
								},
								{
									"key": "expand",
									"value": "totalCount",
									"description": "Expand elements (detailed information). Comma-separated list of fields to include in response. Fields are null otherwise.  Valid values are \"message\" and \"totalCount\".",
									"disabled": true
								},
								{
									"key": "type",
									"value": "",
									"description": "event type associated with this correlation ID.",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "correlationId",
									"value": "",
									"description": "The correlation ID of the Events"
								}
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/event-store-api#get-events-by-correlation-id)\n\nRetrieves events containing the specified Correlation ID. In order to get results, you must have the required roles as defined in the fields `event_type` and `event_harvester`. Otherwise, you will not get back any results.\n\nExample:\n```\nhttps://api.grnry.io/events/cookie123?from=1970-01-01T00:00:00Z&to=2038-01-01T00:00:00Z&offset=0&pagesize=20\n```"
					},
					"response": []
				},
				{
					"name": "Get a Specific Event by ID and Correlation ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{event_store_url}}/events/:correlationId/:eventId",
							"host": [
								"{{event_store_url}}"
							],
							"path": [
								"events",
								":correlationId",
								":eventId"
							],
							"variable": [
								{
									"key": "correlationId",
									"value": "",
									"description": "The correlation ID of the Event."
								},
								{
									"key": "eventId",
									"value": "",
									"description": "The ID of the Event."
								}
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/event-store-api#get-a-specific-event-by-id-and-correlation-id)\n\nRetrieves a single event (including its message payload). In order to get results, you must have the required roles as defined in the fields `event_type` and `event_harvester`. Otherwise, you will not get back any results."
					},
					"response": []
				},
				{
					"name": "Get all Events by type",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{event_store_url}}/events?type=",
							"host": [
								"{{event_store_url}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "type",
									"value": "",
									"description": "REQUIRED: the event-type"
								},
								{
									"key": "expand",
									"value": null,
									"description": "Expand information (detailed information). Comma-separated list of fields to include in the response. Fields are null otherwise. Valid values are message and totalCount.",
									"disabled": true
								},
								{
									"key": "from",
									"value": "1970-01-01T00:00:00Z",
									"description": "Timestamp encoded in ISO notation yyyy-MM-dd'T'hh:MM:ss'Z'. Defaults to 1970-01-01T00:00:00Z.",
									"disabled": true
								},
								{
									"key": "to",
									"value": "2038-01-01T00:00:00Z",
									"description": "Timestamp encoded in ISO notation yyyy-MM-dd'T'hh:MM:ss'Z'. Defaults to now().",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Number of elements to be skipped. Defaults to 0.",
									"disabled": true
								},
								{
									"key": "pagesize",
									"value": "20",
									"description": "Number of elements to be shown. Defaults to 20.",
									"disabled": true
								}
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/event-store-api#get-all-events-by-type)\n\nRetrieves events by type. In order to get results, suitable roles as defined by the fields event_type and event_harvester are required."
					},
					"response": []
				}
			],
			"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/event-store-api)"
		},
		{
			"name": "Belt API",
			"item": [
				{
					"name": "Get all Belts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"url": {
							"raw": "{{belt_url}}/belts",
							"host": [
								"{{belt_url}}"
							],
							"path": [
								"belts"
							],
							"query": [
								{
									"key": "search",
									"value": null,
									"description": "Filter belts by name. Belt names need to be url encoded. Default \"\".",
									"disabled": true
								},
								{
									"key": "expand",
									"value": null,
									"description": "Array of belt states. For possible values, see table at GET belt state definition below.",
									"disabled": true
								},
								{
									"key": "pagesize",
									"value": "250",
									"description": "Number of belts to be returned. Default is 20. Maximum is 250.",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Start offset. Default is 0.",
									"disabled": true
								}
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/belt-api#get-all-belts)\n\nRetrieves full dump of **all** belts in the Belt Store as a list.\n\nIn order to get results, you must have the required roles as defined in the fields `editor` or `viewer`. Otherwise, you will not get back any results."
					},
					"response": []
				},
				{
					"name": "Get a Specific Belt by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"url": {
							"raw": "{{belt_url}}/belts/:id",
							"host": [
								"{{belt_url}}"
							],
							"path": [
								"belts",
								":id"
							],
							"query": [
								{
									"key": "export",
									"value": null,
									"description": "If set to \"true\" (not case sensitive), the belt response will only contain properties a POST body must necessarily contain to create this exact belt. All properties set to default values and all api-generated properties will be omitted. (Only the api-generated id field will be provided). Default is \"\".",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "The ID of Belt."
								}
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/belt-api#get-a-specific-belt-by-id)\n\nRetrieves full dump of a specific belt with a specified ID.\n\nIn order to retrieve results here, it is necessary that you either have an `editor` or `viewer` role assigned to your profile in keycloak. The `editor/viewer` role must match the roles defined for the belt."
					},
					"response": []
				},
				{
					"name": "Create and Store a Belt",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomInt}}-test-belt\",\n    \"description\": \"Test belt - created via postman\",\n    \"extractorFn\": \"from time import time\\r\\nfrom grnry.beltextractor.update import Update\\r\\n\\r\\ndef execute(event, profile=None):\\r\\n    print(profile)\\r\\n    update = Update(profile['correlationId'],[\\\"dummy\\\"]).set_value(\\\"Hallo Belt!\\\",0.5,time(),'P1D','Dummy-Belt')\\r\\n    update.set_type('TestProfileType')\\r\\n    return [update]\\r\\n\",\n    \"labels\": [],\n    \"affectedPaths\": [],\n    \"replicas\": 1,\n    \"millicpu\": 200,\n    \"memory\": 512,\n    \"author\": \"User\",\n    \"reader\": [\n        \"_auth\"\n    ],\n    \"editor\": [\n        \"belt_edit\"\n    ],\n    \"viewer\": [\n        \"belt_view\"\n    ],\n    \"assumedRole\": \"\",\n    \"requirementsPy\": \"\",\n    \"extractorVersion\": \"\",\n    \"eventTypes\": [\n        \"test-a\",\n        \"test-b\"\n    ],\n    \"partitionOffsets\": {},\n    \"beltType\": \"\",\n    \"runtime\": \"\",\n    \"parameter\": \"\",\n    \"debug\": false,\n    \"fetchProfile\": \"FALSE\",\n    \"profileType\": \"test-type\",\n    \"secret\": \"\",\n    \"secretUsername\": \"\",\n    \"secretPassword\": \"\",\n    \"volumes\": \"\",\n    \"volumeMounts\": \"\",\n    \"extraEnv\": \"\"\n}"
						},
						"url": {
							"raw": "{{belt_url}}/belts",
							"host": [
								"{{belt_url}}"
							],
							"path": [
								"belts"
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/belt-api#create-and-store-a-belt)\n\nCreates and stores a belt into the Belt Store. As a response the whole belt configuration is returned. \n\nRequires the role `belt_edit`.\n\nJSON Schema Definitions:\n\n- [Volume Mount](https://javadoc.io/doc/io.fabric8/kubernetes-model/3.0.1/io/fabric8/kubernetes/api/model/VolumeMount.html)\n- [Volume](https://javadoc.io/doc/io.fabric8/kubernetes-model/3.0.1/io/fabric8/kubernetes/api/model/Volume.html)"
					},
					"response": []
				},
				{
					"name": "Create and Store a Belt with specific Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 123123,\n    \"name\": \"{{$randomInt}}-test-belt\",\n    \"description\": \"Test belt - created via postman\",\n    \"extractorFn\": \"from time import time\\r\\nfrom grnry.beltextractor.update import Update\\r\\n\\r\\ndef execute(event, profile=None):\\r\\n    print(profile)\\r\\n    update = Update(profile['correlationId'],[\\\"dummy\\\"]).set_value(\\\"Hallo Belt!\\\",0.5,time(),'P1D','Dummy-Belt')\\r\\n    update.set_type('TestProfileType')\\r\\n    return [update]\\r\\n\",\n    \"labels\": [],\n    \"affectedPaths\": [],\n    \"replicas\": 1,\n    \"millicpu\": 200,\n    \"memory\": 512,\n    \"author\": \"User\",\n    \"reader\": [\n        \"_auth\"\n    ],\n    \"editor\": [\n        \"belt_edit\"\n    ],\n    \"viewer\": [\n        \"belt_view\"\n    ],\n    \"assumedRole\": \"\",\n    \"requirementsPy\": \"\",\n    \"extractorVersion\": \"\",\n    \"eventTypes\": [\n        \"test-a\",\n        \"test-b\"\n    ],\n    \"partitionOffsets\": {},\n    \"beltType\": \"\",\n    \"runtime\": \"\",\n    \"parameter\": \"\",\n    \"debug\": false,\n    \"fetchProfile\": \"FALSE\",\n    \"profileType\": \"test-type\",\n    \"secret\": \"\",\n    \"secretUsername\": \"\",\n    \"secretPassword\": \"\",\n    \"volumes\": \"\",\n    \"volumeMounts\": \"\",\n    \"extraEnv\": \"\"\n}"
						},
						"url": {
							"raw": "{{belt_url}}/belts/:id",
							"host": [
								"{{belt_url}}"
							],
							"path": [
								"belts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "If provided, creates a belt with a given belt id. This id needs to be unique. Otherwise an id is automatically assigned. Value range for id is a positive Long value (i.e. 1 to 9223372036854775807).\n"
								}
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/belt-api#create-and-store-a-belt)\n\nCreates and stores a belt into the Belt Store. As a response the whole belt configuration is returned. \n\nRequires the role `belt_edit`.\n\nJSON Schema Definitions:\n\n- [Volume Mount](https://javadoc.io/doc/io.fabric8/kubernetes-model/3.0.1/io/fabric8/kubernetes/api/model/VolumeMount.html)\n- [Volume](https://javadoc.io/doc/io.fabric8/kubernetes-model/3.0.1/io/fabric8/kubernetes/api/model/Volume.html)"
					},
					"response": []
				},
				{
					"name": "Updates a Belt by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{$randomInt}}-test-belt\",\n\t\"description\":\"Test belt - created via postman\",\n    \"extractorFn\": \"from time import time\\r\\nfrom grnry.beltextractor.update import Update\\r\\n\\r\\ndef execute(event, profile=None):\\r\\n    print(profile)\\r\\n    update = Update(profile['correlationId'],[\\\"dummy\\\"]).set_value(\\\"Hallo Belt!\\\",0.5,time(),'P1D','Dummy-Belt')\\r\\n    update.set_type('TestProfileType')\\r\\n    return [update]\\r\\n\",\n     \"labels\": [],\n     \"affectedPaths\": [],\n     \"replicas\": 5,\n     \"millicpu\": 200,\n     \"memory\": 512,\n     \"author\": \"User\",\n     \"reader\": [\n       \"_auth\"\n     ],\n     \"editor\": [\n       \"belt_edit\"\n     ],\n     \"viewer\": [\n       \"belt_view\"\n     ],\n     \"assumedRole\": \"\",\n     \"requirementsPy\": \"\",\n     \"extractorVersion\": \"\",\n     \"eventTypes\": [\n       \"test-a\"\n     ],\n     \"partitionOffsets\": {},\n     \"beltType\": \"\",\n     \"runtime\": \"\",\n     \"parameter\": \"\",\n     \"debug\": true,\n     \"fetchProfile\": \"FALSE\",\n     \"profileType\": \"test-type\",\n     \"secret\": \"\",\n     \"secretUsername\": \"\",\n     \"secretPassword\": \"\",\n     \"volumes\": [],\n     \"volumeMounts\": [],\n     \"extraEnv\":  []\n}"
						},
						"url": {
							"raw": "{{belt_url}}/belts/:id",
							"host": [
								"{{belt_url}}"
							],
							"path": [
								"belts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "Belt ID."
								}
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/belt-api#updates-a-belt-by-id)\n\nUpdates attributes of a belt, given its ID. \n\nIn order to update a belt, a complete JSON representation of the object needs to be provided. For a list of body parameters, see above POST /belts documentation. Empty fields will be set to default values as specified for POST /belts. The Keycloak user needs to have the `editor` roles defined for the Belt."
					},
					"response": []
				},
				{
					"name": "Delete a Specific Belt",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{belt_url}}/belts/:id",
							"host": [
								"{{belt_url}}"
							],
							"path": [
								"belts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "Belt ID."
								}
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/belt-api#delete-a-specific-belt)\n\nDeletes a specific belt given the ID.\n\nDeletes the belt definition in the database and all corresponding kubernetes resources if the belt is deployed.\n\nThe Keycloak user needs to have the editor roles defined for the Belt."
					},
					"response": []
				},
				{
					"name": "Get a Belt's state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/javascript"
							}
						],
						"url": {
							"raw": "{{belt_url}}/belts/:id/state",
							"host": [
								"{{belt_url}}"
							],
							"path": [
								"belts",
								":id",
								"state"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "Belt ID."
								}
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/belt-api#get-a-belts-state)\n\nRetrieve the status of the Belt's Kubernetes deployment.\n\nIn order to get results, you must have the required roles as defined in the fields `editor` or `viewer`. Otherwise, you will not get back any results."
					},
					"response": []
				},
				{
					"name": "Manipulate a Belt's state",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"action\": \"START\"\n}"
						},
						"url": {
							"raw": "{{belt_url}}/belts/:id/state",
							"host": [
								"{{belt_url}}"
							],
							"path": [
								"belts",
								":id",
								"state"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "Belt ID."
								}
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/belt-api#manipulate-a-belts-state)\n\nUpdate the status of the Belt's Kubernetes deployment. The Keycloak user needs to have the `editor` roles defined for the Belt.\n\nBody example:\n```\n{\"action\": \"START\"}\n```"
					},
					"response": []
				},
				{
					"name": "Get Belt's Pod Logs by Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{belt_url}}/belts/:id/logs",
							"host": [
								"{{belt_url}}"
							],
							"path": [
								"belts",
								":id",
								"logs"
							],
							"query": [
								{
									"key": "lines",
									"value": "500",
									"description": "number of lines to be retrieved per pod. Must be greater than 0 and less than or equal to 500. Default is 500.",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "Belt ID."
								}
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/belt-api#get-belts-pod-logs-by-id)\n\nGet the last n log lines from all pods of the belt with the given `id` where n is specified by the `lines` query parameter.\n\nThis request requires the `editor` roles defined for that belt."
					},
					"response": []
				}
			],
			"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/belt-api)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Profile Store API",
			"item": [
				{
					"name": "Get a Specific Profile by ID and Type",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{profile_url}}/profiles/:profileType/:correlationId",
							"host": [
								"{{profile_url}}"
							],
							"path": [
								"profiles",
								":profileType",
								":correlationId"
							],
							"query": [
								{
									"key": "fragments",
									"value": "",
									"description": "Filters the profile by grain/fragment path(s). You can define multiple path as a comma-separated list. Example: /customer/name,/customer/adress,/invoiceDetails",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "profileType",
									"value": "",
									"description": "The profile type."
								},
								{
									"key": "correlationId",
									"value": "",
									"description": "The correlation ID."
								}
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/profile-store-api#get-a-specific-profile-by-id-and-type)\n\nRetrieves a full dump of a profile fetched by ID and profile type.\n\nIn order to get results, you must have the required roles as defined in the field `reader`. Otherwise, you will not get back any results."
					},
					"response": []
				}
			],
			"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/profile-store-api)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Segment Management API",
			"item": [
				{
					"name": "Get Segment Jobs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{segment_mgmt_url}}/segments",
							"host": [
								"{{segment_mgmt_url}}"
							],
							"path": [
								"segments"
							],
							"query": [
								{
									"key": "pagesize",
									"value": "20",
									"description": "Number of segment jobs to be returned. Default 20.",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"description": "A cursor to define the starting point of your request. Default 0.",
									"disabled": true
								},
								{
									"key": "search",
									"value": null,
									"description": "Fuzzy Search on the displayName to filter the list of returned segment jobs.",
									"disabled": true
								}
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/segment-management-api#get-segment-jobs)\n\nGet all segment jobs sorted by id.\nThis request requires you to have either the correct `viewer` or `editor` role."
					},
					"response": []
				},
				{
					"name": "Get Segment Job by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{segment_mgmt_url}}/segments/:id",
							"host": [
								"{{segment_mgmt_url}}"
							],
							"path": [
								"segments",
								":id"
							],
							"query": [
								{
									"key": "export",
									"value": null,
									"description": "If set to true (not case sensitive), the segment job response will only contain properties a POST body must necessarily contain to create this exact segment job. All properties set to default values and all segment-manager generated properties will be omitted. (only the api-generated id will be provided). Default is false .",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/segment-management-api#get-segment-job-by-id)\n\nGet a segment job by its id.\nThis request requires you to have either the correct `viewer` or `editor` role."
					},
					"response": []
				},
				{
					"name": "Create Segment Job",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"metadata\": {\n        \"displayName\": \"Demo Segment\",\n        \"description\": \"Creates a Job to create a Segment for demo purposes\"\n    },\n    \"roles\": {\n        \"editor\": [\n            \"segment_job_edit\"\n        ],\n        \"viewer\": [\n            \"segment_job_view\",\n            \"demo_viewer\"\n        ]\n    },\n    \"data\": {\n        \"cronjob\": {\n            \"schedule\": \"* * * 1 *\"\n        },\n        \"env\": {\n            \"SOURCE_TABLE_NAME\": \"eventstore\",\n            \"TARGET_SEGMENT_NAME\": \"eventstore_demo_seg\",\n            \"SOURCE_WHERE_CLAUSE\": \"event_harvester = 'adobe'\",\n            \"CITUS_DIST_COL\": \"correlation_id\",\n            \"TYPE\": \"generic\",\n            \"GENERIC_COLUMNS\": \"event_id,event_harvester\",\n            \"GENERIC_TRANSFORMATIONS\": \"theval01=message->'val01'::jsonb|theval02=upper(message->'val02'#>>'{}')::text\",\n            \"TARGET_SEGMENT_INDEXES\": \"idx1=(event_id, theval02)\",\n            \"DEBUG\": \"True\"\n        }\n    },\n    \"labels\": [\n        \"demo\",\n        \"grnry\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{segment_mgmt_url}}/segments",
							"host": [
								"{{segment_mgmt_url}}"
							],
							"path": [
								"segments"
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/segment-management-api#create-segment-job)\n\nCreate a new segment job."
					},
					"response": []
				},
				{
					"name": "Create Segment Job by ID",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"metadata\": {\n        \"displayName\": \"Demo Segment\",\n        \"description\": \"Creates a Job to create a Segment for demo purposes\"\n    },\n    \"roles\": {\n        \"editor\": [\n            \"segment_job_edit\"\n        ],\n        \"viewer\": [\n            \"segment_job_view\",\n            \"demo_viewer\"\n        ]\n    },\n    \"data\": {\n        \"cronjob\": {\n            \"schedule\": \"* * * 1 *\"\n        },\n        \"env\": {\n            \"SOURCE_TABLE_NAME\": \"eventstore\",\n            \"TARGET_SEGMENT_NAME\": \"eventstore_demo_seg\",\n            \"SOURCE_WHERE_CLAUSE\": \"event_harvester = 'adobe'\",\n            \"CITUS_DIST_COL\": \"correlation_id\",\n            \"TYPE\": \"generic\",\n            \"GENERIC_COLUMNS\": \"event_id,event_harvester\",\n            \"GENERIC_TRANSFORMATIONS\": \"theval01=message->'val01'::jsonb|theval02=upper(message->'val02'#>>'{}')::text\",\n            \"TARGET_SEGMENT_INDEXES\": \"idx1=(event_id, theval02)\",\n            \"DEBUG\": \"True\"\n        }\n    },\n    \"labels\": [\n        \"demo\",\n        \"grnry\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{segment_mgmt_url}}/segments?id=demo-segment",
							"host": [
								"{{segment_mgmt_url}}"
							],
							"path": [
								"segments"
							],
							"query": [
								{
									"key": "id",
									"value": "demo-segment",
									"description": "Create a new segment job with the provided id . It needs to be a valid DNS-1123 subdomain and be between 4-134 in length."
								}
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/segment-management-api#create-segment-job)\n\nCreate a new segment job with a specific ID."
					},
					"response": []
				},
				{
					"name": "Update Segment Job",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"metadata\": {\n        \"displayName\": \"Demo Segment\",\n        \"description\": \"Creates a Job to create a Segment for demo purposes\"\n    },\n    \"roles\": {\n        \"editor\": [\n            \"segment_job_edit\"\n        ],\n        \"viewer\": [\n            \"segment_job_view\"\n        ]\n    },\n    \"data\": {\n        \"cronjob\": {\n            \"schedule\": \"* 1 * * *\"\n        },\n        \"env\": {\n            \"SOURCE_TABLE_NAME\": \"eventstore\",\n            \"TARGET_SEGMENT_NAME\": \"eventstore_demo_seg\",\n            \"SOURCE_WHERE_CLAUSE\": \"event_harvester = 'adobe'\",\n            \"CITUS_DIST_COL\": \"correlation_id\",\n            \"TYPE\": \"generic\",\n            \"GENERIC_COLUMNS\": \"event_id,event_harvester\",\n            \"GENERIC_TRANSFORMATIONS\": \"theval01=message->'val01'::jsonb|theval02=upper(message->'val02'#>>'{}')::text\",\n            \"TARGET_SEGMENT_INDEXES\": \"idx1=(event_id, theval02)\",\n            \"DEBUG\": \"True\"\n        }\n    },\n    \"labels\": [\n        \"demo\",\n        \"grnry\",\n        \"updated\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{segment_mgmt_url}}/segments/:id",
							"host": [
								"{{segment_mgmt_url}}"
							],
							"path": [
								"segments",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "Identifier of the segment job."
								}
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/segment-management-api#update-a-segment-job)\n\nUpdates a segment job.\nThis request requires you to have the correct `editor` role."
					},
					"response": []
				},
				{
					"name": "Delete a Segment Job",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{segment_mgmt_url}}/segments/:id",
							"host": [
								"{{segment_mgmt_url}}"
							],
							"path": [
								"segments",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "Identifier of the segment job."
								}
							]
						},
						"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/segment-management-api#delete-a-segment-job)\n\nDeletes a segment job.\nThis request requires you to have the correct `editor` role."
					},
					"response": []
				}
			],
			"description": "[Docs](https://docs.grnry.io/v/1.0-aretha/developer-reference/api-reference/segment-management-api)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var token_time = pm.environment.get(\"token_time\")",
					"if(!token_time || token_time <= Date.now()) {",
					"    var body = 'grant_type=password'",
					"            + '&client_id=' + pm.variables.get(\"client_id\")",
					"            + '&username=' + pm.variables.get(\"username\")",
					"            + '&password=' + pm.variables.get(\"password\");",
					"    console.log(body);",
					"",
					"    var url = pm.variables.get(\"auth_url\") +\"/auth/realms/\" + pm.variables.get(\"realm\") +\"/protocol/openid-connect/token\"",
					"    pm.sendRequest({",
					"        url: url,",
					"        method: 'POST',",
					"        header: {",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"            'Accept': 'application/json'",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: body",
					"        }",
					"    }, function (err, res) {",
					"        pm.environment.set(\"access_token\", res.json().access_token);",
					"        pm.environment.set(\"token_time\", Date.now() + 5*60*1000); //5 min in milliseconds",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "client_id",
			"value": "profile-api"
		},
		{
			"key": "realm",
			"value": "grnry"
		},
		{
			"key": "username",
			"value": "username"
		},
		{
			"key": "password",
			"value": "password"
		},
		{
			"key": "auth_url",
			"value": "https://demo.grnry.io"
		},
		{
			"key": "snowplow_url",
			"value": "https://demo.grnry.io"
		},
		{
			"key": "harvester_url",
			"value": "https://demo.grnry.io"
		},
		{
			"key": "event_store_url",
			"value": "https://demo.grnry.io"
		},
		{
			"key": "belt_url",
			"value": "https://demo.grnry.io"
		},
		{
			"key": "profile_store_url",
			"value": "https://demo.grnry.io"
		},
		{
			"key": "segment_mgmt_url",
			"value": "https://demo.grnry.io"
		}
	]
}