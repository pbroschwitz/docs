{
	"info": {
		"_postman_id": "a768c067-1163-4592-99b4-9ad4ae98b6e6",
		"name": "GRNRY 0.8",
		"description": "GRNRY 0.8 API Collection including sample tests.\n\nVisit Docs: https://docs.grnry.io/v/0.8-lemmy/\n\n##Important env vars:\n\nAuth API auth_url = https://grnry.api.io/ username = someuser password = somepw\n\nBelt API belt_url = https://grnry.api.io/\n\nProfile API profile_url = https://grnry.api.io/\n\nEventStore API event_store_url = https://grnry.api.io/\n\nSCDF API scdf_url = https://grnry.api.io/\n\nSnowplow API snowplow_url = https://grnry.api.io/\n\nHarvester API harvester_url = https://grnry.api.io/\n\n##Tests\n\nAfter each request the a base test is run:\n\nvar skipTest = pm.globals.get(\"skip_collection_test\");\n\nif (!skipTest) { pm.test(\"Status code is 200\", function() { pm.response.to.have.status(200); }); } else { console.log(\"Skipping status code 200 check\") }\n\nNote: Test case collections should be ran seperately due to the usage of postman.NextRequest() to retry requests. This will cause jumping over request if multiple test cases are ran together.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth API",
			"item": [
				{
					"name": "Fetch token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6ac74a5-5f62-49c6-80a7-678c0354bd34",
								"exec": [
									"pm.environment.unset(\"access_token\")",
									"",
									"var json = pm.response.json()",
									"pm.environment.set(\"access_token\", json.access_token)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9d86c36f-53e5-41ee-81cc-aeda2e2e19a7",
								"exec": [
									"pm.environment.set(\"client_id\", \"profile-api\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth_url}}/auth/realms/grnry/protocol/openid-connect/token",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"auth",
								"realms",
								"grnry",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Belt API",
			"item": [
				{
					"name": "Get all belts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cc9077d-aff2-4235-a048-c68a7036c652",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{belt_url}}/belts",
							"host": [
								"{{belt_url}}"
							],
							"path": [
								"belts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific belt by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cc9077d-aff2-4235-a048-c68a7036c652",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"url": {
							"raw": "{{belt_url}}/belts/:id",
							"host": [
								"{{belt_url}}"
							],
							"path": [
								"belts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": [
						{
							"name": "Get specific belt by id",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{belt_url}}/belts/:id",
									"host": [
										"{{belt_url}}"
									],
									"path": [
										"belts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.15.10"
								},
								{
									"key": "Date",
									"value": "Mon, 29 Jul 2019 06:27:19 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/hal+json;charset=UTF-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15724800; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1\",\n    \"name\": \"760-test-belt\",\n    \"description\": \"Test belt - created via postman\",\n    \"labels\": [],\n    \"affectedPaths\": [],\n    \"replicas\": 1,\n    \"millicpu\": 200,\n    \"memory\": 512,\n    \"author\": \"User\",\n    \"reader\": [\n        \"_auth\"\n    ],\n    \"editor\": [\n        \"belt_edit\"\n    ],\n    \"viewer\": [\n        \"belt_view\"\n    ],\n    \"created\": 1564381570757,\n    \"assumedRole\": \"\",\n    \"requirementsPy\": \"\",\n    \"extractorVersion\": \"\",\n    \"extractorFn\": \"from time import time\\r\\nfrom grnry.beltextractor.update import Update\\r\\n\\r\\ndef execute(event, profile=None):\\r\\n    print(profile)\\r\\n    update = Update(profile['correlationId'],[\\\"dummy\\\"]).set_value(\\\"Hallo Belt!\\\",0.5,time(),'P1D','Dummy-Belt')\\r\\n    update.set_type('TestProfileType')\\r\\n    return [update]\\r\\n\",\n    \"eventTypes\": [\n        \"test-a\",\n        \"test-b\"\n    ],\n    \"partitionOffsets\": {},\n    \"beltType\": \"\",\n    \"runtime\": \"\",\n    \"parameter\": \"\",\n    \"debug\": false,\n    \"fetchProfile\": \"FALSE\",\n    \"profileType\": \"test-type\",\n    \"secret\": \"\",\n    \"secretUsername\": \"\",\n    \"secretPassword\": \"\",\n    \"status\": \"STOPPED\",\n    \"volumes\": null,\n    \"volumeMounts\": null,\n    \"extraEnv\": null,\n    \"kubernetesName\": \"grnry-belt-219\",\n    \"_links\": {\n        \"self\": {\n            \"href\": \"https://grnry.io/belts/219\"\n        }\n    },\n    \"id\": \"219\"\n}"
						}
					]
				},
				{
					"name": "Create belt",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1d0f7156-1bb9-4598-ba46-34f6f787d37e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4cb8fbc9-b7a6-4f7a-84f8-bb1715d6dda1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomInt}}-test-belt\",\n    \"description\": \"Test belt - created via postman\",\n    \"extractorFn\": \"from time import time\\r\\nfrom grnry.beltextractor.update import Update\\r\\n\\r\\ndef execute(event, profile=None):\\r\\n    print(profile)\\r\\n    update = Update(profile['correlationId'],[\\\"dummy\\\"]).set_value(\\\"Hallo Belt!\\\",0.5,time(),'P1D','Dummy-Belt')\\r\\n    update.set_type('TestProfileType')\\r\\n    return [update]\\r\\n\",\n    \"labels\": [],\n    \"affectedPaths\": [],\n    \"replicas\": 1,\n    \"millicpu\": 200,\n    \"memory\": 512,\n    \"author\": \"User\",\n    \"reader\": [\n        \"_auth\"\n    ],\n    \"editor\": [\n        \"belt_edit\"\n    ],\n    \"viewer\": [\n        \"belt_view\"\n    ],\n    \"assumedRole\": \"\",\n    \"requirementsPy\": \"\",\n    \"extractorVersion\": \"\",\n    \"eventTypes\": [\n        \"test-a\",\n        \"test-b\"\n    ],\n    \"partitionOffsets\": {},\n    \"beltType\": \"\",\n    \"runtime\": \"\",\n    \"parameter\": \"\",\n    \"debug\": false,\n    \"fetchProfile\": \"FALSE\",\n    \"profileType\": \"test-type\",\n    \"secret\": \"\",\n    \"secretUsername\": \"\",\n    \"secretPassword\": \"\",\n    \"volumes\": \"\",\n    \"volumeMounts\": \"\",\n    \"extraEnv\": \"\"\n}"
						},
						"url": {
							"raw": "{{belt_url}}/belts",
							"host": [
								"{{belt_url}}"
							],
							"path": [
								"belts"
							]
						}
					},
					"response": [
						{
							"name": "Create belt",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{$randomInt}}-test-belt\",\n\t\"description\":\"Test belt - created via postman\",\n    \"extractorFn\": \"from time import time\\r\\nfrom grnry.beltextractor.update import Update\\r\\n\\r\\ndef execute(event, profile=None):\\r\\n    print(profile)\\r\\n    update = Update(profile['correlationId'],[\\\"dummy\\\"]).set_value(\\\"Hallo Belt!\\\",0.5,time(),'P1D','Dummy-Belt')\\r\\n    update.set_type('TestProfileType')\\r\\n    return [update]\\r\\n\",\n     \"labels\": [],\n     \"affectedPaths\": [],\n     \"replicas\": 1,\n     \"millicpu\": 200,\n     \"memory\": 512,\n     \"author\": \"User\",\n     \"reader\": [\n       \"_auth\"\n     ],\n     \"editor\": [\n       \"belt_edit\"\n     ],\n     \"viewer\": [\n       \"belt_view\"\n     ],\n     \"assumedRole\": \"\",\n     \"requirementsPy\": \"\",\n     \"extractorVersion\": \"\",\n     \"eventTypes\": [\n       \"test-a\",\n       \"test-b\"\n     ],\n     \"partitionOffsets\": {},\n     \"beltType\": \"\",\n     \"runtime\": \"\",\n     \"parameter\": \"\",\n     \"debug\": false,\n     \"fetchProfile\": \"FALSE\",\n     \"profileType\": \"test-type\",\n     \"secret\": \"\",\n     \"secretUsername\": \"\",\n     \"secretPassword\": \"\",\n     \"volumes\": \"\",\n     \"volumeMounts\": \"\",\n     \"extraEnv\":  \"\"\n}"
								},
								"url": {
									"raw": "{{belt_url}}/belts",
									"host": [
										"{{belt_url}}"
									],
									"path": [
										"belts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.15.10"
								},
								{
									"key": "Date",
									"value": "Mon, 29 Jul 2019 06:26:10 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/hal+json;charset=UTF-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15724800; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1\",\n    \"name\": \"760-test-belt\",\n    \"description\": \"Test belt - created via postman\",\n    \"labels\": [],\n    \"affectedPaths\": [],\n    \"replicas\": 1,\n    \"millicpu\": 200,\n    \"memory\": 512,\n    \"author\": \"User\",\n    \"reader\": [\n        \"_auth\"\n    ],\n    \"editor\": [\n        \"belt_edit\"\n    ],\n    \"viewer\": [\n        \"belt_view\"\n    ],\n    \"created\": 1564381570757,\n    \"assumedRole\": \"\",\n    \"requirementsPy\": \"\",\n    \"extractorVersion\": \"\",\n    \"extractorFn\": \"from time import time\\r\\nfrom grnry.beltextractor.update import Update\\r\\n\\r\\ndef execute(event, profile=None):\\r\\n    print(profile)\\r\\n    update = Update(profile['correlationId'],[\\\"dummy\\\"]).set_value(\\\"Hallo Belt!\\\",0.5,time(),'P1D','Dummy-Belt')\\r\\n    update.set_type('TestProfileType')\\r\\n    return [update]\\r\\n\",\n    \"eventTypes\": [\n        \"test-a\",\n        \"test-b\"\n    ],\n    \"partitionOffsets\": {},\n    \"beltType\": \"\",\n    \"runtime\": \"\",\n    \"parameter\": \"\",\n    \"debug\": false,\n    \"fetchProfile\": \"FALSE\",\n    \"profileType\": \"test-type\",\n    \"secret\": \"\",\n    \"secretUsername\": \"\",\n    \"secretPassword\": \"\",\n    \"status\": \"STOPPED\",\n    \"volumes\": null,\n    \"volumeMounts\": null,\n    \"extraEnv\": null,\n    \"kubernetesName\": \"grnry-belt-219\",\n    \"id\": \"219\"\n}"
						}
					]
				},
				{
					"name": "Update belt",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1d0f7156-1bb9-4598-ba46-34f6f787d37e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4cb8fbc9-b7a6-4f7a-84f8-bb1715d6dda1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{$randomInt}}-test-belt\",\n\t\"description\":\"Test belt - created via postman\",\n    \"extractorFn\": \"from time import time\\r\\nfrom grnry.beltextractor.update import Update\\r\\n\\r\\ndef execute(event, profile=None):\\r\\n    print(profile)\\r\\n    update = Update(profile['correlationId'],[\\\"dummy\\\"]).set_value(\\\"Hallo Belt!\\\",0.5,time(),'P1D','Dummy-Belt')\\r\\n    update.set_type('TestProfileType')\\r\\n    return [update]\\r\\n\",\n     \"labels\": [],\n     \"affectedPaths\": [],\n     \"replicas\": 5,\n     \"millicpu\": 200,\n     \"memory\": 512,\n     \"author\": \"User\",\n     \"reader\": [\n       \"_auth\"\n     ],\n     \"editor\": [\n       \"belt_edit\"\n     ],\n     \"viewer\": [\n       \"belt_view\"\n     ],\n     \"assumedRole\": \"\",\n     \"requirementsPy\": \"\",\n     \"extractorVersion\": \"\",\n     \"eventTypes\": [\n       \"test-a\"\n     ],\n     \"partitionOffsets\": {},\n     \"beltType\": \"\",\n     \"runtime\": \"\",\n     \"parameter\": \"\",\n     \"debug\": true,\n     \"fetchProfile\": \"FALSE\",\n     \"profileType\": \"test-type\",\n     \"secret\": \"\",\n     \"secretUsername\": \"\",\n     \"secretPassword\": \"\",\n     \"volumes\": [],\n     \"volumeMounts\": [],\n     \"extraEnv\":  []\n}"
						},
						"url": {
							"raw": "{{belt_url}}/belts/:id",
							"host": [
								"{{belt_url}}"
							],
							"path": [
								"belts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": [
						{
							"name": "Update belt",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{$randomInt}}-test-belt\",\n\t\"description\":\"Test belt - created via postman\",\n    \"extractorFn\": \"from time import time\\r\\nfrom grnry.beltextractor.update import Update\\r\\n\\r\\ndef execute(event, profile=None):\\r\\n    print(profile)\\r\\n    update = Update(profile['correlationId'],[\\\"dummy\\\"]).set_value(\\\"Hallo Belt!\\\",0.5,time(),'P1D','Dummy-Belt')\\r\\n    update.set_type('TestProfileType')\\r\\n    return [update]\\r\\n\",\n     \"labels\": [],\n     \"affectedPaths\": [],\n     \"replicas\": 5,\n     \"millicpu\": 200,\n     \"memory\": 512,\n     \"author\": \"User\",\n     \"reader\": [\n       \"_auth\"\n     ],\n     \"editor\": [\n       \"belt_edit\"\n     ],\n     \"viewer\": [\n       \"belt_view\"\n     ],\n     \"assumedRole\": \"\",\n     \"requirementsPy\": \"\",\n     \"extractorVersion\": \"\",\n     \"eventTypes\": [\n       \"test-a\"\n     ],\n     \"partitionOffsets\": {},\n     \"beltType\": \"\",\n     \"runtime\": \"\",\n     \"parameter\": \"\",\n     \"debug\": true,\n     \"fetchProfile\": \"FALSE\",\n     \"profileType\": \"test-type\",\n     \"secret\": \"\",\n     \"secretUsername\": \"\",\n     \"secretPassword\": \"\",\n     \"volumes\": \"\",\n     \"volumeMounts\": \"\",\n     \"extraEnv\":  \"\"\n}"
								},
								"url": {
									"raw": "{{belt_url}}/belts/:id",
									"host": [
										"{{belt_url}}"
									],
									"path": [
										"belts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.15.10"
								},
								{
									"key": "Date",
									"value": "Mon, 29 Jul 2019 06:28:35 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/hal+json;charset=UTF-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15724800; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"2\",\n    \"name\": \"584-test-belt\",\n    \"description\": \"Test belt - created via postman\",\n    \"labels\": [],\n    \"affectedPaths\": [],\n    \"replicas\": 5,\n    \"millicpu\": 200,\n    \"memory\": 512,\n    \"author\": \"User\",\n    \"reader\": [\n        \"_auth\"\n    ],\n    \"editor\": [\n        \"belt_edit\"\n    ],\n    \"viewer\": [\n        \"belt_view\"\n    ],\n    \"created\": 1564381570757,\n    \"assumedRole\": \"\",\n    \"requirementsPy\": \"\",\n    \"extractorVersion\": \"\",\n    \"extractorFn\": \"from time import time\\r\\nfrom grnry.beltextractor.update import Update\\r\\n\\r\\ndef execute(event, profile=None):\\r\\n    print(profile)\\r\\n    update = Update(profile['correlationId'],[\\\"dummy\\\"]).set_value(\\\"Hallo Belt!\\\",0.5,time(),'P1D','Dummy-Belt')\\r\\n    update.set_type('TestProfileType')\\r\\n    return [update]\\r\\n\",\n    \"eventTypes\": [\n        \"test-a\"\n    ],\n    \"partitionOffsets\": {},\n    \"beltType\": \"\",\n    \"runtime\": \"\",\n    \"parameter\": \"\",\n    \"debug\": true,\n    \"fetchProfile\": \"FALSE\",\n    \"profileType\": \"test-type\",\n    \"secret\": \"\",\n    \"secretUsername\": \"\",\n    \"secretPassword\": \"\",\n    \"status\": \"STOPPED\",\n    \"volumes\": null,\n    \"volumeMounts\": null,\n    \"extraEnv\": null,\n    \"kubernetesName\": \"grnry-belt-219\",\n    \"id\": \"219\"\n}"
						}
					]
				},
				{
					"name": "Delete belt",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1d0f7156-1bb9-4598-ba46-34f6f787d37e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4cb8fbc9-b7a6-4f7a-84f8-bb1715d6dda1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{belt_url}}/belts/:id",
							"host": [
								"{{belt_url}}"
							],
							"path": [
								"belts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": [
						{
							"name": "Delete belt",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{belt_url}}/belts/:id",
									"host": [
										"{{belt_url}}"
									],
									"path": [
										"belts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.15.10"
								},
								{
									"key": "Date",
									"value": "Mon, 29 Jul 2019 06:29:13 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/hal+json;charset=UTF-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15724800; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								}
							],
							"cookie": [],
							"body": "{\n    \"content\": true\n}"
						}
					]
				},
				{
					"name": "Start belt",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1d0f7156-1bb9-4598-ba46-34f6f787d37e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4cb8fbc9-b7a6-4f7a-84f8-bb1715d6dda1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"action\": \"START\"\n}"
						},
						"url": {
							"raw": "{{belt_url}}/belts/:id/state",
							"host": [
								"{{belt_url}}"
							],
							"path": [
								"belts",
								":id",
								"state"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": [
						{
							"name": "Start belt",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"action\": \"START\"\n}"
								},
								"url": {
									"raw": "{{belt_url}}/belts/:id/state",
									"host": [
										"{{belt_url}}"
									],
									"path": [
										"belts",
										":id",
										"state"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.15.10"
								},
								{
									"key": "Date",
									"value": "Mon, 29 Jul 2019 06:29:44 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15724800; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"DEPLOYING\"\n}"
						}
					]
				},
				{
					"name": "Stop belt",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1d0f7156-1bb9-4598-ba46-34f6f787d37e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4cb8fbc9-b7a6-4f7a-84f8-bb1715d6dda1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"action\": \"STOP\"\n}"
						},
						"url": {
							"raw": "{{belt_url}}/belts/:id/state",
							"host": [
								"{{belt_url}}"
							],
							"path": [
								"belts",
								":id",
								"state"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": [
						{
							"name": "Stop belt",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"action\": \"STOP\"\n}"
								},
								"url": {
									"raw": "{{belt_url}}/belts/:id/state",
									"host": [
										"{{belt_url}}"
									],
									"path": [
										"belts",
										":id",
										"state"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.15.10"
								},
								{
									"key": "Date",
									"value": "Mon, 29 Jul 2019 06:30:00 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15724800; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"STOPPING\"\n}"
						}
					]
				},
				{
					"name": "Get belt state",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cc9077d-aff2-4235-a048-c68a7036c652",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/javascript"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"url": {
							"raw": "{{belt_url}}/belts/:id/state",
							"host": [
								"{{belt_url}}"
							],
							"path": [
								"belts",
								":id",
								"state"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": [
						{
							"name": "Get belt state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/javascript"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"url": {
									"raw": "{{belt_url}}/belts/:id/state",
									"host": [
										"{{belt_url}}"
									],
									"path": [
										"belts",
										":id",
										"state"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.15.10"
								},
								{
									"key": "Date",
									"value": "Mon, 29 Jul 2019 06:30:15 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15724800; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"STOPPED\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Profile API",
			"item": [
				{
					"name": "Get profiles",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{profile_url}}/profiles?pagesize=20&offset=0",
							"host": [
								"{{profile_url}}"
							],
							"path": [
								"profiles"
							],
							"query": [
								{
									"key": "pagesize",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get profiles of specific type",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{profile_url}}/profiles/:profile_type?pagesize&offset",
							"host": [
								"{{profile_url}}"
							],
							"path": [
								"profiles",
								":profile_type"
							],
							"query": [
								{
									"key": "pagesize",
									"value": null
								},
								{
									"key": "offset",
									"value": null
								}
							],
							"variable": [
								{
									"key": "profile_type",
									"value": ""
								}
							]
						}
					},
					"response": [
						{
							"name": "Get profiles of specific type",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{profile_url}}/profiles/type/sometype",
									"host": [
										"{{profile_url}}"
									],
									"path": [
										"profiles",
										"type",
										"sometype"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.15.10"
								},
								{
									"key": "Date",
									"value": "Mon, 29 Jul 2019 06:32:28 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15724800; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "OPTIONS, GET, POST, PUT, DELETE, HEAD"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"totalCount\": 1,\n    \"profiles\": [{\n        \"correlationId\": \"Contract15434\",\n        \"type\": \"sometype\",\n        \"jsonPayload\": {\n            \"metadata\": {\n                \"_latest\": {\n                    \"_c\": 1,\n                    \"_v\": [\n                        \"Contract15434\",\n                        \"4666e306-3248-43a9-bfb4-2affac4d8adc\",\n                        \"1563544468463\",\n                        \"snowplow-a\",\n                        \"harvester\",\n                        \"Contract15434\"\n                    ],\n                    \"_in\": 1563553866161,\n                    \"_origin\": \"integration-test\",\n                    \"_reader\": \"_all\",\n                    \"_ttl\": \"P100Y\"\n                }\n            }\n        }\n    }]\n}"
						}
					]
				},
				{
					"name": "Get specific profile by type and correlation_id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{profile_url}}/profiles/:profile_type/:correlation_id?fragments=",
							"host": [
								"{{profile_url}}"
							],
							"path": [
								"profiles",
								":profile_type",
								":correlation_id"
							],
							"query": [
								{
									"key": "fragments",
									"value": "",
									"description": "Filters the profile by grain/fragment path(s). You can define multiple path as a comma-separated list. Example: /customer/name,/customer/adress,/invoiceDetails"
								}
							],
							"variable": [
								{
									"key": "profile_type",
									"value": ""
								},
								{
									"key": "correlation_id",
									"value": ""
								}
							]
						}
					},
					"response": [
						{
							"name": "Get specific profile by type",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{profile_url}}/profiles/integration-test/Contract15434",
									"host": [
										"{{profile_url}}"
									],
									"path": [
										"profiles",
										"integration-test",
										"Contract15434"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.15.10"
								},
								{
									"key": "Date",
									"value": "Mon, 29 Jul 2019 06:44:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15724800; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "OPTIONS, GET, POST, PUT, DELETE, HEAD"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"correlationId\": \"Contract15434\",\n    \"type\": \"integration-test\",\n    \"jsonPayload\": {\n        \"metadata\": {\n            \"_latest\": {\n                \"_c\": 1,\n                \"_v\": [\n                    \"Contract15434\",\n                    \"4666e306-3248-43a9-bfb4-2affac4d8adc\",\n                    \"1563544468463\",\n                    \"snowplow-a\",\n                    \"snowplow-a-std-harvester\",\n                    \"Contract15434\",\n                    \"142345dc-2077-4d77-a8d9-1d3f32afb93c\",\n                    \"1563544468462\",\n                    \"snowplow-catch-all\",\n                    \"snowplow-catch-all-std-harvester\"\n                ],\n                \"_in\": 1563553866161,\n                \"_origin\": \"integration-test\",\n                \"_reader\": \"_all\",\n                \"_ttl\": \"P100Y\"\n            }\n        },\n        \"_id\": \"Contract15434\"\n    }\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "EventStore API",
			"item": [
				{
					"name": "Get Events by correlation id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{event_store_url}}/events/:correlationId?from=1970-01-01T00:00:00Z&to=2038-01-01T00:00:00Z&offset=0&pagesize=20",
							"host": [
								"{{event_store_url}}"
							],
							"path": [
								"events",
								":correlationId"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Valid values are \"message\" and \"totalCount\".",
									"disabled": true
								},
								{
									"key": "from",
									"value": "1970-01-01T00:00:00Z"
								},
								{
									"key": "to",
									"value": "2038-01-01T00:00:00Z"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "pagesize",
									"value": "20"
								}
							],
							"variable": [
								{
									"key": "correlationId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Event by correlation id and event id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{event_store_url}}/events/:correlationId/:eventId",
							"host": [
								"{{event_store_url}}"
							],
							"path": [
								"events",
								":correlationId",
								":eventId"
							],
							"variable": [
								{
									"key": "correlationId",
									"value": ""
								},
								{
									"key": "eventId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Events by type",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{event_store_url}}/events?type=&from=1970-01-01T00:00:00Z&to=2038-01-01T00:00:00Z&offset=0&pagesize=20",
							"host": [
								"{{event_store_url}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "type",
									"value": "",
									"description": "Required"
								},
								{
									"key": "expand",
									"value": null,
									"description": "Valid values are \"message\" and \"totalCount\".",
									"disabled": true
								},
								{
									"key": "from",
									"value": "1970-01-01T00:00:00Z"
								},
								{
									"key": "to",
									"value": "2038-01-01T00:00:00Z"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "pagesize",
									"value": "20"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "SCDF API (Deprecated)",
			"item": [
				{
					"name": "List Streams",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{scdf_url}}/streams/definitions",
							"host": [
								"{{scdf_url}}"
							],
							"path": [
								"streams",
								"definitions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Stream",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scdf_url}}/streams/definitions?name=&definition=",
							"host": [
								"{{scdf_url}}"
							],
							"path": [
								"streams",
								"definitions"
							],
							"query": [
								{
									"key": "name",
									"value": "",
									"description": "Example: tme-harvester-sp-js"
								},
								{
									"key": "definition",
									"value": "",
									"description": "Example: :raw > grnry-scriptable-processor | grnry-data-in-metadata-processor > :event-type-sp-js"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deploy Stream",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"app.grnry-scriptable.management.endpoints.web.exposure.include\": \"prometheus,info,health\",\n    \"app.grnry-scriptable.management.metrics.export.prometheus.enabled\": true,\n    \"app.grnry-scriptable.scriptable-transformer.language\": \"groovy\",\n    \"app.grnry-scriptable.scriptable-transformer.script\": \"import groovy.json.JsonSlurper\\\\nimport groovy.json.JsonOutput\\\\nimport io.grnry.scdfapps.scriptable.snowplow.SnowplowSerDe\\\\nimport io.grnry.scdfapps.scriptable.snowplow.SnowplowCollectorPayload\\\\n\\\\nSnowplowCollectorPayload snowplowEvent = SnowplowSerDe.deserialize(payload)\\\\n\\\\nJsonSlurper jsonSlurper = new JsonSlurper()\\\\n\\\\nif (snowplowEvent.getBody()){\\\\n        def actualPayload =  jsonSlurper.parseText(snowplowEvent.getBody())\\\\n        if (actualPayload?.data && actualPayload?.data[0]) {        \\\\n            def data = actualPayload.data[0]\\\\n            if (data?.filterCriteria && data.filterCriteria.equalsIgnoreCase(\\\\\\\"b\\\\\\\")) {\\\\n                return JsonOutput.toJson(snowplowEvent)\\\\n            }\\\\n        }\\\\n}\\\\nreturn null\",\n    \"app.grnry-scriptable.scriptable-transformer.variables\": \"path=duid\",\n    \"app.grnry-scriptable.spring.cloud.stream.kafka.binder.autoCreateTopics\" : true,\n    \"app.grnry-scriptable.spring.cloud.stream.kafka.binder.autoAddPartitions\" : true,\n    \"app.grnry-scriptable.spring.cloud.stream.bindings.input.consumer.concurrency\": 6,\n    \"app.grnry-scriptable.spring.cloud.stream.bindings.input.consumer.partitioned\": true,\n    \"app.grnry-scriptable.spring.cloud.stream.bindings.output.consumer.partitioned\": true,\n    \"app.grnry-scriptable.spring.cloud.stream.bindings.output.producer.partitionCount\": 48,\n    \"app.grnry-scriptable.spring.cloud.stream.kafka.bindings.input.consumer.resetOffsets\": true,\n    \"app.grnry-scriptable.spring.cloud.stream.kafka.bindings.input.consumer.startOffset\": \"latest\",\n    \"app.grnry-scriptable.spring.cloud.stream.bindings.input.consumer.maxAttempts\" : 1,\n    \"app.grnry-scriptable.spring.cloud.stream.bindings.harvesterdlq.destination\": \"grnry_harvester_${grnry.harvesterName}_dlq\",\n    \"app.grnry-scriptable.spring.cloud.stream.bindings.harvesterdlq.producer.partitionCount\": 24,\n    \"app.grnry-scriptable.spring.cloud.stream.bindings.harvesterdlq.producer.autoAddPartitions\": true,\n    \"app.grnry-scriptable.grnry.harvesterName\" : \"snowplow-b-std-harvester\",\n    \"app.grnry-scriptable.grnry.eventTypeName\" : \"snowplow-b\",\n\t\"app.grnry-data-in-metadata.metadata.correlationIdExpression\": \"#jsonPath(#jsonPath(payload, 'body'), 'data[0].correlationId')\",\n    \"app.grnry-data-in-metadata.metadata.eventIdExpression\": \"#safeJsonPath(#safeJsonPath(payload, 'body'), 'data[0].eventId')?:#randomUUID()\",\n    \"app.grnry-data-in-metadata.metadata.eventTypeName\": \"${grnry.eventTypeName}\",\n    \"app.grnry-data-in-metadata.metadata.harvesterName\": \"${grnry.harvesterName}\",\n    \"app.grnry-data-in-metadata.spring.cloud.stream.bindings.input.consumer.concurrency\": 6,\n    \"app.grnry-data-in-metadata.spring.cloud.stream.bindings.input.consumer.partitioned\": true,\n    \"app.grnry-data-in-metadata.spring.cloud.stream.bindings.input.consumer.maxAttempts\" : 1,\n    \"app.grnry-data-in-metadata.spring.cloud.stream.kafka.binder.autoAddPartitions\" : true,\n    \"app.grnry-data-in-metadata.grnry.harvesterName\" : \"snowplow-b-std-harvester\" ,\n    \"app.grnry-data-in-metadata.grnry.eventTypeName\" : \"snowplow-b\" ,\n    \"app.grnry-data-in-metadata.spring.cloud.stream.bindings.harvesterdlq.destination\": \"grnry_harvester_${grnry.harvesterName}_dlq\",\n    \"app.grnry-data-in-metadata.spring.cloud.stream.bindings.harvesterdlq.producer.partitionCount\": 24,\n    \"app.grnry-data-in-metadata.spring.cloud.stream.bindings.harvesterdlq.producer.autoAddPartitions\": true,\n    \"deployer.*.kubernetes.imagePullPolicy\": \"Always\",\n    \"deployer.*.kubernetes.limits.cpu\": \"400m\",\n    \"deployer.*.kubernetes.limits.memory\": \"512Mi\",\n    \"deployer.*.kubernetes.requests.cpu\": \"400m\",\n    \"deployer.*.kubernetes.requests.memory\": \"512Mi\",\n    \"deployer.*.kubernetes.livenessProbeDelay\":\"120\",\n    \"deployer.*.kubernetes.readinessProbeDelay\":\"120\", \n    \"deployer.*.kubernetes.volumeMounts\": \"[{name: 'secret', mountPath: '/usr/src/app/rsa_privatekey.key' , subPath: 'rsa_privatekey.key' , readOnly : 'true' },{name: 'secret', mountPath: '/usr/src/app/rsa_publickey.key' , subPath: 'rsa_publickey.key' , readOnly : 'true' }]\",\n    \"deployer.*.kubernetes.volumes\": \"[{name: 'secret', secret: { secretName : 'grnry-base-encryption-token' , defaultMode : '256' }}]\"\n}"
						},
						"url": {
							"raw": "{{scdf_url}}/streams/deployments/:name",
							"host": [
								"{{scdf_url}}"
							],
							"path": [
								"streams",
								"deployments",
								":name"
							],
							"variable": [
								{
									"key": "name",
									"value": "",
									"description": "Harvester name"
								}
							]
						},
						"description": "2. Deploy Stream"
					},
					"response": []
				},
				{
					"name": "Delete Stream",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scdf_url}}/streams/deployments/:name",
							"host": [
								"{{scdf_url}}"
							],
							"path": [
								"streams",
								"deployments",
								":name"
							],
							"variable": [
								{
									"key": "name",
									"value": "",
									"description": "Harvester Name"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "@Deprecated - Use Harvester API instead.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0b278df9-0620-42de-997f-f8ad34c786cb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "deab20c6-97f4-441e-a593-c5e11d03315c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Snowplow API",
			"item": [
				{
					"name": "Create Snowplow Event",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n\t{\n\t  \"correlationId\": \"some_id\",\n\t  \"filterCriteria\": \"harvester_criteria\"\n\t}\n ]\n}\n"
						},
						"url": {
							"raw": "{{snowplow_url}}/api/com.snowplowanalytics.snowplow/tp2",
							"host": [
								"{{snowplow_url}}"
							],
							"path": [
								"api",
								"com.snowplowanalytics.snowplow",
								"tp2"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Harvester API",
			"item": [
				{
					"name": "/event-types",
					"item": [
						{
							"name": "/persisters",
							"item": [
								{
									"name": "Get persister",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{harvester_url}}/event-types/:event-type-name/eventstores/:eventstore-type/persister",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"event-types",
												":event-type-name",
												"eventstores",
												":eventstore-type",
												"persister"
											],
											"query": [
												{
													"key": "expand",
													"value": null,
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "event-type-name",
													"value": ""
												},
												{
													"key": "eventstore-type",
													"value": "pg",
													"description": "Default pg"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update persister config",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"appVersion\": \"latest\",\n\t\"appConfig\": {},\n    \"deployerConfig\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{harvester_url}}/event-types/:event-type-name/eventstores/:eventstore-type/persister",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"event-types",
												":event-type-name",
												"eventstores",
												":eventstore-type",
												"persister"
											],
											"variable": [
												{
													"key": "event-type-name",
													"value": ""
												},
												{
													"key": "eventstore-type",
													"value": "pg",
													"description": "Default pg"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get persister state",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{harvester_url}}/event-types/:event-type-name/eventstores/:eventstore-type/persister/state",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"event-types",
												":event-type-name",
												"eventstores",
												":eventstore-type",
												"persister",
												"state"
											],
											"variable": [
												{
													"key": "event-type-name",
													"value": ""
												},
												{
													"key": "eventstore-type",
													"value": "pg",
													"description": "Default pg"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update persister state",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"action\": \"START\"\n\t\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{harvester_url}}/event-types/:event-type-name/eventstores/:eventstore-type/persister/state",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"event-types",
												":event-type-name",
												"eventstores",
												":eventstore-type",
												"persister",
												"state"
											],
											"variable": [
												{
													"key": "event-type-name",
													"value": ""
												},
												{
													"key": "eventstore-type",
													"value": "pg",
													"description": "Default pg"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Persister Logs",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"action\": \"START\"\n\t\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{harvester_url}}/event-types/:event-type-name/eventstores/:eventstore-type/persister/logs",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"event-types",
												":event-type-name",
												"eventstores",
												":eventstore-type",
												"persister",
												"logs"
											],
											"query": [
												{
													"key": "lines",
													"value": "5000",
													"description": "1.... 5000",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "event-type-name",
													"value": ""
												},
												{
													"key": "eventstore-type",
													"value": "pg",
													"description": "Default pg"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get all event types",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{harvester_url}}/event-types?expand=totalCount,persisters",
									"host": [
										"{{harvester_url}}"
									],
									"path": [
										"event-types"
									],
									"query": [
										{
											"key": "search",
											"value": "test",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "",
											"disabled": true
										},
										{
											"key": "pagesize",
											"value": "",
											"disabled": true
										},
										{
											"key": "expand",
											"value": "totalCount,persisters",
											"description": "Values: totalCount,persisters"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get event types by name",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"url": {
									"raw": "{{harvester_url}}/event-types/:event-type-name",
									"host": [
										"{{harvester_url}}"
									],
									"path": [
										"event-types",
										":event-type-name"
									],
									"variable": [
										{
											"key": "event-type-name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create event-type",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"displayName\": \"customers\",\n\t\"description\": \"Customers Event Type\",\n\t\"eventIdExpression\": \"#randomUUID()\",\n\t\"timestampExpression\": \"#nowMillis()\",\n\t\"correlationIdExpression\": \"#randomUUID()\",\n\t\"eventstoreTTL\": \"P100Y\",\n\t\"replication\": 3,\n\t\"partitonCount\": 32,\n\t\"retentionMs\": 345600000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{harvester_url}}/event-types",
									"host": [
										"{{harvester_url}}"
									],
									"path": [
										"event-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update existing event-type",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"displayName\": \"customers\",\n\t\"description\": \"Customers Event Type\",\n\t\"eventIdExpression\": \"#randomUUID()\",\n\t\"timestampExpression\": \"#nowMillis()\",\n\t\"correlationIdExpression\": \"#randomUUID()\",\n\t\"eventstoreTTL\": \"P100Y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{harvester_url}}/event-types/:event-type-name",
									"host": [
										"{{harvester_url}}"
									],
									"path": [
										"event-types",
										":event-type-name"
									],
									"variable": [
										{
											"key": "event-type-name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete event-type",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{harvester_url}}/event-types/:event-type-name",
									"host": [
										"{{harvester_url}}"
									],
									"path": [
										"event-types",
										":event-type-name"
									],
									"variable": [
										{
											"key": "event-type-name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get event types by name and version",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{harvester_url}}/event-types/:event-type-name/:version",
									"host": [
										"{{harvester_url}}"
									],
									"path": [
										"event-types",
										":event-type-name",
										":version"
									],
									"variable": [
										{
											"key": "event-type-name",
											"value": ""
										},
										{
											"key": "version",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "/harvesters",
					"item": [
						{
							"name": "/source-types",
							"item": [
								{
									"name": "Get all source types",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{harvester_url}}/harvesters/source-types?expand=totalCount",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"source-types"
											],
											"query": [
												{
													"key": "search",
													"value": "test",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "totalCount"
												},
												{
													"key": "offset",
													"value": "",
													"disabled": true
												},
												{
													"key": "pagesize",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all source types by name",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{harvester_url}}/harvesters/source-types/:source_type_name",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"source-types",
												":source_type_name"
											],
											"variable": [
												{
													"key": "source_type_name",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all source types by name and version",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{harvester_url}}/harvesters/source-types/:source-type-name/:version",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"source-types",
												":source-type-name",
												":version"
											],
											"variable": [
												{
													"key": "source-type-name",
													"value": ""
												},
												{
													"key": "version",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "/instances",
							"item": [
								{
									"name": "List all  Harvester Instances",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{harvester_url}}/harvesters/instances?expand=totalCount",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"instances"
											],
											"query": [
												{
													"key": "search",
													"value": "test",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "totalCount"
												},
												{
													"key": "offset",
													"value": "0",
													"disabled": true
												},
												{
													"key": "pagesize",
													"value": "20",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Harvester Instance by Name",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{harvester_url}}/harvesters/instances/:havester-name",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"instances",
												":havester-name"
											],
											"query": [
												{
													"key": "search",
													"value": "test",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "",
													"disabled": true
												},
												{
													"key": "pagesize",
													"value": "",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "havester-name",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Harvester Instance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "17425ea4-0906-48e4-8b0d-9e5d1b4c60a8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\n\t\"displayName\": \"Harvester Name\",\n\t\"sourceType\": {\n\t\t\"name\": \"source_name\",\n\t\t\"version\": \"latest\"\n\t},\n\t\"eventType\": {\n\t\t\"name\": \"event_type_name\",\n\t\t\"version\": \"latest\"\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{harvester_url}}/harvesters/instances",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"instances"
											],
											"query": [
												{
													"key": "search",
													"value": "test",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "",
													"disabled": true
												},
												{
													"key": "pagesize",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Harvester",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\n\t\"displayName\": \"Harvester Name\",\n\t\"sourceType\": {\n\t\t\"name\": \"source_name\",\n\t\t\"version\": \"latest\"\n\t},\n\t\"eventType\": {\n\t\t\"name\": \"event_type_name\",\n\t\t\"version\": \"latest\"\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{harvester_url}}/harvesters/instances/:havester-name",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"instances",
												":havester-name"
											],
											"query": [
												{
													"key": "search",
													"value": "test",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "",
													"disabled": true
												},
												{
													"key": "pagesize",
													"value": "",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "havester-name",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Harvester",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "17425ea4-0906-48e4-8b0d-9e5d1b4c60a8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{harvester_url}}/harvesters/instances/:harvester-name",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"instances",
												":harvester-name"
											],
											"query": [
												{
													"key": "search",
													"value": "test",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "",
													"disabled": true
												},
												{
													"key": "pagesize",
													"value": "",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "harvester-name",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Harvester State",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{harvester_url}}/harvesters/instances/:havester-name/state",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"instances",
												":havester-name",
												"state"
											],
											"query": [
												{
													"key": "search",
													"value": "test",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "",
													"disabled": true
												},
												{
													"key": "pagesize",
													"value": "",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "havester-name",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Harvester State",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"action\": \"START\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{harvester_url}}/harvesters/instances/:havester-name/state",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"instances",
												":havester-name",
												"state"
											],
											"query": [
												{
													"key": "search",
													"value": "test",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "",
													"disabled": true
												},
												{
													"key": "pagesize",
													"value": "",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "havester-name",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Harvester Logs",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{harvester_url}}/harvesters/instances/:harvester-name/logs/:step-name",
											"host": [
												"{{harvester_url}}"
											],
											"path": [
												"harvesters",
												"instances",
												":harvester-name",
												"logs",
												":step-name"
											],
											"query": [
												{
													"key": "lines",
													"value": "100",
													"description": "Maximum number of lines the log should contain. Default 500",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "harvester-name",
													"value": "",
													"description": "Name of the Harvester Instance"
												},
												{
													"key": "step-name",
													"value": "sourceType",
													"description": "Must be sourceType, transform, or metadataExtractor."
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Segment Management API",
			"item": [
				{
					"name": "Get segment jobs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{segment_mgmt_url}}/segments?pagesize&offset&search",
							"host": [
								"{{segment_mgmt_url}}"
							],
							"path": [
								"segments"
							],
							"query": [
								{
									"key": "pagesize",
									"value": null
								},
								{
									"key": "offset",
									"value": null
								},
								{
									"key": "search",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get segment job by id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{segment_mgmt_url}}/segments/:id",
							"host": [
								"{{segment_mgmt_url}}"
							],
							"path": [
								"segments",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create segment job",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n\t\"metadata\": {\n\t\t\"displayName\": \"Demo Segment\",\n\t\t\"description\": \"This is a demo segment \"\n\t},\n\t\"roles\": {\n        \"editor\": [\n            \"segment_job_edit\"\n        ],\n        \"viewer\": [\n            \"segment_job_view\"\n        ]\n    },\n\t\n\t\"data\": {\n\t\t\"cronjob\": {\n\t\t\"schedule\": \"* * * 1 *\"\n\t  },\n\t  \"env\": {\n\t      \"SOURCE_TABLE_NAME\": \"eventstore\",\n\t      \"TARGET_SEGMENT_NAME\": \"eventstore_demo_seg\",\n\t      \"SOURCE_WHERE_CLAUSE\": \"event_harvester = 'adobe'\",\n\t      \"CITUS_DIST_COL\": \"correlation_id\",\n\t      \"TYPE\": \"generic\",\n\t      \"GENERIC_COLUMNS\": \"event_id,event_harvester\",\n\t      \"GENERIC_TRANSFORMATIONS\": \"theval01=message->'val01'::jsonb|theval02=upper(message->'val02'#>>'{}')::text\",\n\t      \"TARGET_SEGMENT_INDEXES\": \"idx1=(event_id, theval02)\",\n\t      \"PROMETHEUS_PUSHGATEWAY\": \"grnry-prometheus-pushgateway.monitoring.svc.cluster.local:9091\",\n\t      \"PROMETHEUS_JOB\": \"eventstore_demo_seg\",\n\t      \"DEBUG\": \"True\"\n    \t}\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{segment_mgmt_url}}/segments",
							"host": [
								"{{segment_mgmt_url}}"
							],
							"path": [
								"segments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update segment job",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n\t\"metadata\": {\n\t\t\"displayName\": \"Demo Segment\",\n\t\t\"description\": \"This is a demo segment \"\n\t},\n\t\"roles\": {\n        \"editor\": [\n            \"segment_job_edit\"\n        ],\n        \"viewer\": [\n            \"segment_job_view\"\n        ]\n    },\n\t\n\t\"data\": {\n\t\t\"cronjob\": {\n\t\t\"schedule\": \"* * * 1 *\"\n\t  },\n\t  \"env\": {\n\t      \"SOURCE_TABLE_NAME\": \"eventstore\",\n\t      \"TARGET_SEGMENT_NAME\": \"eventstore_demo_seg\",\n\t      \"SOURCE_WHERE_CLAUSE\": \"event_harvester = 'adobe'\",\n\t      \"CITUS_DIST_COL\": \"correlation_id\",\n\t      \"TYPE\": \"generic\",\n\t      \"GENERIC_COLUMNS\": \"event_id,event_harvester\",\n\t      \"GENERIC_TRANSFORMATIONS\": \"theval01=message->'val01'::jsonb|theval02=upper(message->'val02'#>>'{}')::text\",\n\t      \"TARGET_SEGMENT_INDEXES\": \"idx1=(event_id, theval02)\",\n\t      \"PROMETHEUS_PUSHGATEWAY\": \"grnry-prometheus-pushgateway.monitoring.svc.cluster.local:9091\",\n\t      \"PROMETHEUS_JOB\": \"eventstore_demo_seg\",\n\t      \"DEBUG\": \"True\"\n    \t}\n\t},\n\t\"labels\": [\"demo\", \"customer\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{segment_mgmt_url}}/segments/:id",
							"host": [
								"{{segment_mgmt_url}}"
							],
							"path": [
								"segments",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a segment job",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n\t\"metadata\": {\n\t\t\"displayName\": \"Demo Segment\",\n\t\t\"description\": \"This is a demo segment \"\n\t},\n\t\"roles\": {\n        \"editor\": [\n            \"segment_job_edit\"\n        ],\n        \"viewer\": [\n            \"segment_job_view\"\n        ]\n    },\n\t\n\t\"data\": {\n\t\t\"cronjob\": {\n\t\t\"schedule\": \"* * * 1 *\"\n\t  },\n\t  \"env\": {\n\t      \"SOURCE_TABLE_NAME\": \"eventstore\",\n\t      \"TARGET_SEGMENT_NAME\": \"eventstore_demo_seg\",\n\t      \"SOURCE_WHERE_CLAUSE\": \"event_harvester = 'adobe'\",\n\t      \"CITUS_DIST_COL\": \"correlation_id\",\n\t      \"TYPE\": \"generic\",\n\t      \"GENERIC_COLUMNS\": \"event_id,event_harvester\",\n\t      \"GENERIC_TRANSFORMATIONS\": \"theval01=message->'val01'::jsonb|theval02=upper(message->'val02'#>>'{}')::text\",\n\t      \"TARGET_SEGMENT_INDEXES\": \"idx1=(event_id, theval02)\",\n\t      \"PROMETHEUS_PUSHGATEWAY\": \"grnry-prometheus-pushgateway.monitoring.svc.cluster.local:9091\",\n\t      \"PROMETHEUS_JOB\": \"eventstore_demo_seg\",\n\t      \"DEBUG\": \"True\"\n    \t}\n\t},\n\t\"labels\": [\"demo\", \"customer\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{segment_mgmt_url}}/segments/:id",
							"host": [
								"{{segment_mgmt_url}}"
							],
							"path": [
								"segments",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Functional Tests",
					"item": [
						{
							"name": "1. create new profile",
							"item": [
								{
									"name": "fetch token for belt-api user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6ac74a5-5f62-49c6-80a7-678c0354bd34",
												"exec": [
													"pm.environment.unset(\"access_token\")",
													"",
													"var json = pm.response.json()",
													"pm.environment.set(\"access_token\", json.access_token)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9d86c36f-53e5-41ee-81cc-aeda2e2e19a7",
												"exec": [
													"pm.environment.set(\"client_id\", \"belt-api\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{auth_url}}/auth/realms/grnry/protocol/openid-connect/token",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"auth",
												"realms",
												"grnry",
												"protocol",
												"openid-connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "setup test data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c1bfbf5-b678-45f5-bc04-c44a4bccc47c",
												"exec": [
													"var uuid = require('uuid'); ",
													"var profileCorrelationId = uuid.v4();",
													"",
													"",
													"pm.environment.set(\"profile_id\", profileCorrelationId);",
													"pm.environment.set(\"profile_type\", uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/delay/0",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"delay",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "create belt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "07c3f853-cf9c-4c32-aa0a-794f200fc15b",
												"exec": [
													"var username = pm.environment.get(\"username\");",
													"",
													"",
													"if (username === \"tu-restricted\") {",
													"    pm.environment.set(\"belt_edit_perm\", \"belt_edit\");",
													"    pm.environment.set(\"belt_view_perm\", \"belt_view\");",
													"} else if (username === \"tu-admin\") {",
													"    pm.environment.set(\"belt_edit_perm\", \"belt_edit_privileged\");",
													"    pm.environment.set(\"belt_view_perm\", \"belt_view_privileged\");",
													"} else {",
													"    pm.environment.set(\"belt_edit_perm\", \"belt_edit\");",
													"    pm.environment.set(\"belt_view_perm\", \"belt_view\");",
													"}",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "047b4f85-391c-43bf-ad2e-c96bd58acf6b",
												"exec": [
													"pm.environment.unset(\"belt_id\");",
													"",
													"var json = pm.response.json();",
													"",
													"pm.environment.set(\"belt_id\", json.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomInt}}-test-belt\",\n    \"description\": \"Test Belt to append to profile.\",\n    \"labels\": [],\n    \"affectedPaths\": [],\n    \"replicas\": 1,\n    \"millicpu\": 200,\n    \"memory\": 512,\n    \"author\": \"\",\n    \"reader\": [\n        \"\\\"_auth\\\"\"\n    ],\n    \"editor\": [\n        \"{{belt_edit_perm}}\"\n    ],\n    \"viewer\": [\n        \"{{belt_view_perm}}\"\n    ],\n    \"created\": 1562595981223,\n    \"assumedRole\": \"\",\n    \"requirementsPy\": \"\",\n    \"extractorVersion\": \"\",\n    \"extractorFn\": \"import json\\r\\nimport sys\\r\\nfrom time import time\\r\\nfrom grnry.beltextractor.update import Update\\r\\nimport logging\\r\\nimport random\\r\\n\\r\\ndef lookup(dictionary,keys):\\r\\n   \\r\\n\\tif type(dictionary)==type(''):\\r\\n\\t\\t\\t\\r\\n\\t\\tdictionary=json.loads(dictionary)\\r\\n\\ttry:\\r\\n\\t\\tif len(keys)>1:\\r\\n\\t\\t\\tvalue = lookup(dictionary[keys[0]],keys[1:])\\r\\n\\t\\t\\r\\n\\t\\telse:\\r\\n\\t\\t\\tvalue = dictionary[keys[0]]\\r\\n\\t\\t\\r\\n\\t\\treturn value\\r\\n\\t\\r\\n\\texcept:\\r\\n\\t\\t\\r\\n\\t\\treturn None\\r\\n\\r\\ndef myfunc(input,profile_data,config):\\r\\n\\treturn str(random.randint(1,6))\\r\\n\\t\\r\\ndef makepath(stringpath):\\r\\n\\tpath=stringpath.split('\\/')\\r\\n\\treturn path  \\r\\n\\t\\t\\t\\r\\ndef execute(event_headers, event, profile=None):\\r\\n\\tencoding = 'UTF-8'\\r\\n\\r\\n\\tlogging.basicConfig(format='%(asctime)s [%(levelname)s] %(name)s: %(message)s')\\r\\n\\tlogger = logging.getLogger(__name__)\\r\\n\\r\\n\\tlogger.setLevel(logging.DEBUG)\\r\\n\\tlogger.debug(\\\"event: \\\" + str(event))\\r\\n\\tlogger.debug(\\\"profile: \\\" + str(profile))\\r\\n\\t\\r\\n\\t\\r\\n\\tcorrelation_id= event_headers['grnry-correlation-id']\\r\\n\\tevent_data = lookup(event,['body'])\\r\\n\\t\\r\\n\\tif event_data is None:\\r\\n\\t\\treturn None\\r\\n\\t\\r\\n\\r\\n\\tlogger.debug(\\\"event data is: \\\" + str(event_data))\\r\\n\\tupdates=[]\\r\\n\\t\\r\\n\\tif lookup(event_data,[\\\"crash\\\"])==\\\"1\\\":\\r\\n\\t\\tlogger.debug(\\\"crash\\\")\\r\\n\\t\\tcrash #crash is not defined\\r\\n\\t\\r\\n\\tif lookup(event_data,['simple_pairs']):\\r\\n\\t\\t\\r\\n\\t\\tfor simple_pair in lookup(event_data,['simple_pairs']): \\r\\n\\t\\t\\tvalue = simple_pair['value']\\r\\n\\t\\t\\tif lookup(simple_pair,['operation']):\\r\\n\\t\\t\\t\\tif simple_pair['operation'] in ['_array_append', '_array_put', '_array_append_with_history', '_array_put_with_history'] and not type(value) == type([]):\\r\\n\\t\\t\\t\\t\\tvalue = [value]\\r\\n\\t\\t\\t\\tupdates.append(Update(simple_pair['cid'],makepath(simple_pair['path'])).set_value(value=value, reader=simple_pair['reader'], origin=simple_pair['origin'])) \\r\\n\\t\\t\\t\\tupdates[-1].set_operation(simple_pair['operation'])\\r\\n\\t\\t\\telse:\\r\\n\\t\\t\\t\\tupdates.append(Update(simple_pair['cid'],makepath(simple_pair['path'])).set_value(value=value, reader=simple_pair['reader'], origin=simple_pair['origin'])) \\r\\n\\r\\n\\t\\t\\tif lookup(simple_pair,['type']):\\r\\n\\t\\t\\t\\tupdates[-1].set_type(simple_pair['type'])\\r\\n\\t\\r\\n\\tif lookup(event_data,['process']) and profile:\\r\\n\\t\\tfor event in lookup(event_data,['process']):\\r\\n\\t\\t\\tprofile_path='jsonPayload'+'\\/'+event['profile_path']+'\\/'+'_latest'+'\\/'+'_v'\\r\\n\\t\\t\\tprocessed_data=myfunc(event['value'],lookup(profile,makepath(profile_path)),event['config'])\\r\\n\\t\\t\\tupdates.append(Update(event['cid'],makepath(event['path'])).set_value(value=processed_data, reader=event['reader']))\\r\\n\\t\\r\\n\\tif len(updates)>0:\\r\\n\\t\\treturn updates\\r\\n\\telse:\\r\\n\\t\\treturn None  \\r\\n\",\n    \"eventTypes\": [\n        \"snowplow-b\"\n    ],\n    \"partitionOffsets\": {},\n    \"beltType\": \"\",\n    \"runtime\": \"\",\n    \"parameter\": \"\",\n    \"debug\": false,\n    \"fetchProfile\": \"false\",\n    \"profileType\": \"{{profile_type}}\",\n    \"secret\": \"belt-api-tester\",\n    \"secretUsername\": \"username\",\n    \"secretPassword\": \"password\",\n    \"volumes\": null,\n    \"volumeMounts\": null,\n    \"extraEnv\": null\n}"
										},
										"url": {
											"raw": "{{belt_url}}/belts",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts"
											]
										}
									},
									"response": []
								},
								{
									"name": "get belt state - expect STOPPED (retry 10x a 3 sec)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cc9077d-aff2-4235-a048-c68a7036c652",
												"exec": [
													"var body = JSON.parse(responseBody);",
													"",
													"",
													"if (body[\"status\"] == \"STOPPED\") {",
													"    console.log(\"Belt successfully running\");",
													"    pm.globals.unset(\"retry_count\");",
													"    pm.expect(body[\"status\"]).to.eql(\"STOPPED\");",
													"    ",
													"} else {",
													"    let retryCount = pm.globals.has(\"retry_count\") && pm.globals.get(\"retry_count\") || 0;",
													"    if (retryCount < 10) {",
													"        console.log(\"retyring again\");",
													"        ++retryCount;",
													"        pm.globals.set(\"retry_count\", retryCount);",
													"        postman.setNextRequest('get belt state - expect STOPPED (retry 10x a 3 sec)');",
													"        pm.test(\"retrying again: \" + retryCount, () => {",
													"            throw new Error(\"Belt status is: \" + body[\"status\"]);",
													"        });",
													"        //wait 3 seconds",
													"        setTimeout(function() {}, [3000]);",
													"    } else {",
													"        pm.globals.unset(\"retry_count\");",
													"        pm.test(\"Max retry reached: \" + retryCount, () => {",
													"             throw new Error(\"Belt status is: \" + body[\"status\"]);",
													"        });",
													"        postman.setNextRequest(null)",
													"    }",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/javascript"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{belt_url}}/belts/{{belt_id}}/state",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts",
												"{{belt_id}}",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "start belt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1d0f7156-1bb9-4598-ba46-34f6f787d37e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4cb8fbc9-b7a6-4f7a-84f8-bb1715d6dda1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"action\": \"START\"\n}"
										},
										"url": {
											"raw": "{{belt_url}}/belts/{{belt_id}}/state",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts",
												"{{belt_id}}",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "get belt state - expect RUNNING (retry 10x a 3 sec)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cc9077d-aff2-4235-a048-c68a7036c652",
												"exec": [
													"var body = JSON.parse(responseBody);",
													"",
													"",
													"if (body[\"status\"] == \"RUNNING\") {",
													"    console.log(\"Belt successfully running\");",
													"    pm.globals.unset(\"retry_count\");",
													"    pm.expect(body[\"status\"]).to.eql(\"RUNNING\");",
													"    ",
													"} else {",
													"    let retryCount = pm.globals.has(\"retry_count\") && pm.globals.get(\"retry_count\") || 0;",
													"    if (retryCount < 10) {",
													"        console.log(\"retyring again\");",
													"        ++retryCount;",
													"        pm.globals.set(\"retry_count\", retryCount);",
													"        postman.setNextRequest('get belt state - expect RUNNING (retry 10x a 3 sec)');",
													"        pm.test(\"retrying again, current retry count: \" + retryCount, () => {",
													"            throw new Error(\"Belt status is: \" + body[\"status\"]);",
													"        });",
													"        //wait 3 seconds",
													"        setTimeout(function() {}, [3000]);",
													"    } else {",
													"        pm.globals.unset(\"retry_count\");",
													"        pm.test(\"Max retry reached: \" + retryCount, () => {",
													"             throw new Error(\"Belt status is: \" + body[\"status\"]);",
													"        });",
													"        postman.setNextRequest(null)",
													"    }",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "511a6d6c-21b1-403d-89d8-d7a76fcc5e85",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/javascript"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{belt_url}}/belts/{{belt_id}}/state",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts",
												"{{belt_id}}",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait 20 seconds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cc9077d-aff2-4235-a048-c68a7036c652",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "511a6d6c-21b1-403d-89d8-d7a76fcc5e85",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/delay/20",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"delay",
												"20"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Snowplow Event",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e9092b65-2c74-4dc6-b679-e18005b59c9b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": [\r\n    {\r\n      \"correlationId\": \"{{profile_id}}\",\r\n      \"filterCriteria\": \"b\"\r\n    }\r\n  ],\r\n  \"crash\": \"0\",\r\n  \"simple_pairs\": [\r\n    {\r\n      \"cid\": \"{{profile_id}}\",\r\n      \"type\": \"{{profile_type}}\",\r\n      \"value\": \"test_value\",\r\n      \"reader\": \"_all\",\r\n      \"operation\": \"_array_append\",\r\n      \"path\": \"appendable_path\",\r\n      \"origin\":\"test-276\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{snowplow_url}}/api/com.snowplowanalytics.snowplow/tp2",
											"host": [
												"{{snowplow_url}}"
											],
											"path": [
												"api",
												"com.snowplowanalytics.snowplow",
												"tp2"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait 20 seconds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cc9077d-aff2-4235-a048-c68a7036c652",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "511a6d6c-21b1-403d-89d8-d7a76fcc5e85",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/delay/20",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"delay",
												"20"
											]
										}
									},
									"response": []
								},
								{
									"name": "stop belt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1d0f7156-1bb9-4598-ba46-34f6f787d37e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4cb8fbc9-b7a6-4f7a-84f8-bb1715d6dda1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"action\": \"STOP\"\n}"
										},
										"url": {
											"raw": "{{belt_url}}/belts/{{belt_id}}/state",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts",
												"{{belt_id}}",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "get belt state - expect STOPPED (retry 10x a 3 sec)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cc9077d-aff2-4235-a048-c68a7036c652",
												"exec": [
													"var body = JSON.parse(responseBody);",
													"",
													"",
													"if (body[\"status\"] == \"STOPPED\") {",
													"    console.log(\"Belt successfully running\");",
													"    pm.globals.unset(\"retry_count\");",
													"    pm.expect(body[\"status\"]).to.eql(\"STOPPED\");",
													"    ",
													"} else {",
													"    let retryCount = pm.globals.has(\"retry_count\") && pm.globals.get(\"retry_count\") || 0;",
													"    if (retryCount < 10) {",
													"        console.log(\"retyring again\");",
													"        ++retryCount;",
													"        pm.globals.set(\"retry_count\", retryCount);",
													"        postman.setNextRequest('get belt state - expect STOPPED (retry 10x a 3 sec)');",
													"        pm.test(\"retrying again, current retry count: \" + retryCount, () => {",
													"            throw new Error(\"Belt status is: \" + body[\"status\"]);",
													"        });",
													"        //wait 3 seconds",
													"        setTimeout(function() {}, [3000]);",
													"    } else {",
													"        pm.globals.unset(\"retry_count\");",
													"        pm.test(\"Max retry reached: \" + retryCount, () => {",
													"             throw new Error(\"Belt status is: \" + body[\"status\"]);",
													"        });",
													"        postman.setNextRequest(null)",
													"    }",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/javascript"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{belt_url}}/belts/{{belt_id}}/state",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts",
												"{{belt_id}}",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete belt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1d0f7156-1bb9-4598-ba46-34f6f787d37e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4cb8fbc9-b7a6-4f7a-84f8-bb1715d6dda1",
												"exec": [
													"",
													"var json = pm.response.json();",
													"pm.test(\"Belt successfully deleted\", function() {",
													"      pm.expect(json.content).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{belt_url}}/belts/{{belt_id}}",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts",
												"{{belt_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "fetch token for profile-api user Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6ac74a5-5f62-49c6-80a7-678c0354bd34",
												"exec": [
													"pm.environment.unset(\"access_token\")",
													"",
													"var json = pm.response.json()",
													"pm.environment.set(\"access_token\", json.access_token)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9d86c36f-53e5-41ee-81cc-aeda2e2e19a7",
												"exec": [
													"pm.environment.set(\"client_id\", \"profile-api\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{auth_url}}/auth/realms/grnry/protocol/openid-connect/token",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"auth",
												"realms",
												"grnry",
												"protocol",
												"openid-connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait 5 seconds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cc9077d-aff2-4235-a048-c68a7036c652",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "511a6d6c-21b1-403d-89d8-d7a76fcc5e85",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/delay/5",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"delay",
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "get specific profile by type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53d21429-61cc-4751-b1c9-1caaf8976ba3",
												"exec": [
													"var json = pm.response.json();",
													"",
													"var id = pm.environment.get(\"profile_id\");",
													"var type = pm.environment.get(\"profile_type\");",
													"console.log(id)",
													"pm.test('Has correct top level data', function() {",
													"  pm.expect(json).to.have.property('jsonPayload');",
													"  pm.expect(json.correlationId).to.eql(id);",
													"  pm.expect(json.type).to.eql(type);",
													"});",
													"",
													"var jsonPayload = json.jsonPayload;",
													"",
													"pm.test('Has correct path data', function() {",
													"  pm.expect(jsonPayload).to.have.property('appendable_path');",
													"  var value = jsonPayload.appendable_path._latest._v[0];",
													"  ",
													"  pm.expect(value).to.eql('test_value');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"url": {
											"raw": "{{profile_url}}/profiles/{{profile_type}}/{{profile_id}}",
											"host": [
												"{{profile_url}}"
											],
											"path": [
												"profiles",
												"{{profile_type}}",
												"{{profile_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "reset test Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56f5a8db-ae02-46d0-847a-39e29b0a2291",
												"exec": [
													"pm.environment.unset(\"profile_id\");",
													"pm.environment.unset(\"profile_type\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/delay/0",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"delay",
												"0"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Belt API tests",
					"item": [
						{
							"name": "1. create, start, stop and delete",
							"item": [
								{
									"name": "fetch token for belt-api user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6ac74a5-5f62-49c6-80a7-678c0354bd34",
												"exec": [
													"pm.environment.unset(\"access_token\")",
													"",
													"var json = pm.response.json()",
													"pm.environment.set(\"access_token\", json.access_token)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9d86c36f-53e5-41ee-81cc-aeda2e2e19a7",
												"exec": [
													"pm.environment.set(\"client_id\", \"belt-api\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{auth_url}}/auth/realms/grnry/protocol/openid-connect/token",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"auth",
												"realms",
												"grnry",
												"protocol",
												"openid-connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "create new test belt for snowplow-a",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1d0f7156-1bb9-4598-ba46-34f6f787d37e",
												"exec": [
													"var username = pm.environment.get(\"username\");",
													"",
													"",
													"if (username === \"tu-restricted\") {",
													"    pm.environment.set(\"belt_edit_perm\", \"belt_edit\");",
													"    pm.environment.set(\"belt_view_perm\", \"belt_view\");",
													"} else if (username === \"tu-admin\") {",
													"    pm.environment.set(\"belt_edit_perm\", \"belt_edit_privileged\");",
													"    pm.environment.set(\"belt_view_perm\", \"belt_view_privileged\");",
													"} else {",
													"    pm.environment.set(\"belt_edit_perm\", \"belt_edit\");",
													"    pm.environment.set(\"belt_view_perm\", \"belt_view\");",
													"}",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4cb8fbc9-b7a6-4f7a-84f8-bb1715d6dda1",
												"exec": [
													"pm.environment.unset(\"belt_id\");",
													"",
													"var json = pm.response.json();",
													"",
													"pm.environment.set(\"belt_id\", json.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{$randomInt}}-test-belt\",\n\t\"description\":\"Test belt - created via postman test suite - created by {{developer}}\",\n    \"extractorFn\": \"from time import time\\r\\nfrom grnry.beltextractor.update import Update\\r\\n\\r\\ndef execute(headers, event, profile=None):\\r\\n    print(profile)\\r\\n    update = Update(headers['grnry-correlation-id'],[\\\"dummy\\\"]).set_value(\\\"Hallo Belt!\\\",0.5,time(),'P1D','Dummy-Belt')\\r\\n    update.set_type('TestProfileType')\\r\\n    return [update]\\r\\n\",\n\t\"eventTypes\": [\n        \"snowplow-a\"\n        ],\n    \"editor\": [\n        \"{{belt_edit_perm}}\"\n    ],\n    \"viewer\": [\n\t     \"{{belt_view_perm}}\"\n    ]\n}"
										},
										"url": {
											"raw": "{{belt_url}}/belts",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts"
											]
										}
									},
									"response": []
								},
								{
									"name": "get belt state - expect STOPPED (retry 10x a 3 sec)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cc9077d-aff2-4235-a048-c68a7036c652",
												"exec": [
													"var body = JSON.parse(responseBody);",
													"",
													"",
													"if (body[\"status\"] == \"STOPPED\") {",
													"    console.log(\"Belt successfully running\");",
													"    pm.globals.unset(\"retry_count\");",
													"    pm.expect(body[\"status\"]).to.eql(\"STOPPED\");",
													"    ",
													"} else {",
													"    let retryCount = pm.globals.has(\"retry_count\") && pm.globals.get(\"retry_count\") || 0;",
													"    if (retryCount < 10) {",
													"        console.log(\"retyring again\");",
													"        ++retryCount;",
													"        pm.globals.set(\"retry_count\", retryCount);",
													"        postman.setNextRequest('get belt state - expect STOPPED (retry 10x a 3 sec)');",
													"        pm.test(\"retrying again: \" + retryCount, () => {",
													"            throw new Error(\"Belt status is: \" + body[\"status\"]);",
													"        });",
													"        //wait 3 seconds",
													"        setTimeout(function() {}, [3000]);",
													"    } else {",
													"        pm.globals.unset(\"retry_count\");",
													"        pm.test(\"Max retry reached: \" + retryCount, () => {",
													"             throw new Error(\"Belt status is: \" + body[\"status\"]);",
													"        });",
													"        postman.setNextRequest(null)",
													"    }",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/javascript"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{belt_url}}/belts/{{belt_id}}/state",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts",
												"{{belt_id}}",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "start belt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1d0f7156-1bb9-4598-ba46-34f6f787d37e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4cb8fbc9-b7a6-4f7a-84f8-bb1715d6dda1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"action\": \"START\"\n}"
										},
										"url": {
											"raw": "{{belt_url}}/belts/{{belt_id}}/state",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts",
												"{{belt_id}}",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "get belt state - expect RUNNING (retry 10x a 3 sec)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cc9077d-aff2-4235-a048-c68a7036c652",
												"exec": [
													"var body = JSON.parse(responseBody);",
													"",
													"",
													"if (body[\"status\"] == \"RUNNING\") {",
													"    console.log(\"Belt successfully running\");",
													"    pm.globals.unset(\"retry_count\");",
													"    pm.expect(body[\"status\"]).to.eql(\"RUNNING\");",
													"    ",
													"} else {",
													"    let retryCount = pm.globals.has(\"retry_count\") && pm.globals.get(\"retry_count\") || 0;",
													"    if (retryCount < 10) {",
													"        console.log(\"retyring again\");",
													"        ++retryCount;",
													"        pm.globals.set(\"retry_count\", retryCount);",
													"        postman.setNextRequest('get belt state - expect RUNNING (retry 10x a 3 sec)');",
													"        pm.test(\"retrying again, current retry count: \" + retryCount, () => {",
													"            throw new Error(\"Belt status is: \" + body[\"status\"]);",
													"        });",
													"        //wait 3 seconds",
													"        setTimeout(function() {}, [3000]);",
													"    } else {",
													"        pm.globals.unset(\"retry_count\");",
													"        pm.test(\"Max retry reached: \" + retryCount, () => {",
													"             throw new Error(\"Belt status is: \" + body[\"status\"]);",
													"        });",
													"        postman.setNextRequest(null)",
													"    }",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "511a6d6c-21b1-403d-89d8-d7a76fcc5e85",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/javascript"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{belt_url}}/belts/{{belt_id}}/state",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts",
												"{{belt_id}}",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "stop belt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1d0f7156-1bb9-4598-ba46-34f6f787d37e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4cb8fbc9-b7a6-4f7a-84f8-bb1715d6dda1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"action\": \"STOP\"\n}"
										},
										"url": {
											"raw": "{{belt_url}}/belts/{{belt_id}}/state",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts",
												"{{belt_id}}",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "get belt state - expect STOPPED (retry 10x a 3 sec)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cc9077d-aff2-4235-a048-c68a7036c652",
												"exec": [
													"var body = JSON.parse(responseBody);",
													"",
													"",
													"if (body[\"status\"] == \"STOPPED\") {",
													"    console.log(\"Belt successfully running\");",
													"    pm.globals.unset(\"retry_count\");",
													"    pm.expect(body[\"status\"]).to.eql(\"STOPPED\");",
													"    ",
													"} else {",
													"    let retryCount = pm.globals.has(\"retry_count\") && pm.globals.get(\"retry_count\") || 0;",
													"    if (retryCount < 10) {",
													"        console.log(\"retyring again\");",
													"        ++retryCount;",
													"        pm.globals.set(\"retry_count\", retryCount);",
													"        postman.setNextRequest('get belt state - expect STOPPED (retry 10x a 3 sec)');",
													"        pm.test(\"retrying again, current retry count: \" + retryCount, () => {",
													"            throw new Error(\"Belt status is: \" + body[\"status\"]);",
													"        });",
													"        //wait 3 seconds",
													"        setTimeout(function() {}, [3000]);",
													"    } else {",
													"        pm.globals.unset(\"retry_count\");",
													"        pm.test(\"Max retry reached: \" + retryCount, () => {",
													"             throw new Error(\"Belt status is: \" + body[\"status\"]);",
													"        });",
													"        postman.setNextRequest(null)",
													"    }",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/javascript"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{belt_url}}/belts/{{belt_id}}/state",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts",
												"{{belt_id}}",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete belt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1d0f7156-1bb9-4598-ba46-34f6f787d37e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4cb8fbc9-b7a6-4f7a-84f8-bb1715d6dda1",
												"exec": [
													"",
													"var json = pm.response.json();",
													"pm.test(\"Belt successfully deleted\", function() {",
													"      pm.expect(json.content).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{belt_url}}/belts/{{belt_id}}",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts",
												"{{belt_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get specific belt by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cc9077d-aff2-4235-a048-c68a7036c652",
												"exec": [
													"pm.test(\"Status code is 404\", function() {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.globals.set(\"skipCollectionTest\", false);",
													"pm.environment.unset(\"belt_id\");",
													"pm.globals.unset(\"retry_count\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "697f7006-175d-4326-b669-eb89af61f2cc",
												"exec": [
													"pm.globals.set(\"skip_collection_test\", true)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{belt_url}}/belts/{{belt_id}}",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts",
												"{{belt_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "2. create, update, delete",
							"item": [
								{
									"name": "fetch token for belt-api user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6ac74a5-5f62-49c6-80a7-678c0354bd34",
												"exec": [
													"pm.environment.unset(\"access_token\")",
													"",
													"var json = pm.response.json()",
													"pm.environment.set(\"access_token\", json.access_token)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9d86c36f-53e5-41ee-81cc-aeda2e2e19a7",
												"exec": [
													"pm.environment.set(\"client_id\", \"belt-api\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{auth_url}}/auth/realms/grnry/protocol/openid-connect/token",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"auth",
												"realms",
												"grnry",
												"protocol",
												"openid-connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "create new test belt for snowplow-a",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1d0f7156-1bb9-4598-ba46-34f6f787d37e",
												"exec": [
													"var username = pm.environment.get(\"username\");",
													"",
													"",
													"if (username === \"tu-restricted\") {",
													"    pm.environment.set(\"belt_edit_perm\", \"belt_edit\");",
													"    pm.environment.set(\"belt_view_perm\", \"belt_view\");",
													"} else if (username === \"tu-admin\") {",
													"    pm.environment.set(\"belt_edit_perm\", \"belt_edit_privileged\");",
													"    pm.environment.set(\"belt_view_perm\", \"belt_view_privileged\");",
													"} else {",
													"    pm.environment.set(\"belt_edit_perm\", \"belt_edit\");",
													"    pm.environment.set(\"belt_view_perm\", \"belt_view\");",
													"}",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4cb8fbc9-b7a6-4f7a-84f8-bb1715d6dda1",
												"exec": [
													"pm.environment.unset(\"belt_id\");",
													"",
													"var json = pm.response.json();",
													"",
													"pm.environment.set(\"belt_id\", json.id);",
													"pm.environment.set(\"belt_name\", json.name);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{$randomInt}}-test-belt\",\n\t\"description\":\"Test belt - created via postman test suite - created by {{developer}}\",\n    \"extractorFn\": \"from time import time\\r\\nfrom grnry.beltextractor.update import Update\\r\\n\\r\\ndef execute(headers, event, profile=None):\\r\\n    print(profile)\\r\\n    update = Update(headers['grnry-correlation-id'],[\\\"dummy\\\"]).set_value(\\\"Hallo Belt!\\\",0.5,time(),'P1D','Dummy-Belt')\\r\\n    update.set_type('TestProfileType')\\r\\n    return [update]\\r\\n\",\n\t\"eventTypes\": [\n        \"snowplow-a\"\n        ],\n    \"editor\": [\n        \"{{belt_edit_perm}}\"\n    ],\n    \"viewer\": [\n\t     \"{{belt_view_perm}}\"\n    ]\n}"
										},
										"url": {
											"raw": "{{belt_url}}/belts",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts"
											]
										}
									},
									"response": []
								},
								{
									"name": "get belt state - expect STOPPED (retry 10x a 3 sec)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cc9077d-aff2-4235-a048-c68a7036c652",
												"exec": [
													"var body = JSON.parse(responseBody);",
													"",
													"",
													"if (body[\"status\"] == \"STOPPED\") {",
													"    console.log(\"Belt successfully running\");",
													"    pm.globals.unset(\"retry_count\");",
													"    pm.expect(body[\"status\"]).to.eql(\"STOPPED\");",
													"    ",
													"} else {",
													"    let retryCount = pm.globals.has(\"retry_count\") && pm.globals.get(\"retry_count\") || 0;",
													"    if (retryCount < 10) {",
													"        console.log(\"retyring again\");",
													"        ++retryCount;",
													"        pm.globals.set(\"retry_count\", retryCount);",
													"        postman.setNextRequest('get belt state - expect STOPPED');",
													"        pm.test(\"retrying again: \" + retryCount, () => {",
													"            throw new Error(\"Belt status is: \" + body[\"status\"]);",
													"        });",
													"        //wait 3 seconds",
													"        setTimeout(function() {}, [3000]);",
													"    } else {",
													"        pm.globals.unset(\"retry_count\");",
													"        pm.test(\"Max retry reached: \" + retryCount, () => {",
													"             throw new Error(\"Belt status is: \" + body[\"status\"]);",
													"        });",
													"        postman.setNextRequest(null)",
													"    }",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/javascript"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{belt_url}}/belts/{{belt_id}}/state",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts",
												"{{belt_id}}",
												"state"
											]
										}
									},
									"response": []
								},
								{
									"name": "update belt name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1d0f7156-1bb9-4598-ba46-34f6f787d37e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4cb8fbc9-b7a6-4f7a-84f8-bb1715d6dda1",
												"exec": [
													"var body = JSON.parse(responseBody);",
													"pm.test(\"Belt updated worked\", function() {",
													"    pm.expect(Number(body.version)).to.eql(2);",
													"});",
													"pm.test(\"Belt variables not updated\", function() {",
													"    pm.expect(body.assumedRole).to.eql(\"updated\");",
													"    pm.expect(body[\"status\"]).to.eql(\"RUNNING_BUT_OUTDATED\");",
													"});",
													"",
													"pm.environment.unset(\"belt_name\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{belt_name}}-{{$randomInt}}\",\n\t\"description\":\"Test belt - created via postman test suite - created by {{developer}}\",\n    \"extractorFn\": \"from time import time\\r\\nfrom grnry.beltextractor.update import Update\\r\\n\\r\\ndef execute(event, profile=None):\\r\\n    print(profile)\\r\\n    update = Update(profile['correlationId'],[\\\"dummy\\\"]).set_value(\\\"Hallo Belt!\\\",0.5,time(),'P1D','Dummy-Belt')\\r\\n    update.set_type('TestProfileType')\\r\\n    return [update]\\r\\n\",\n\t\n\t\"eventTypes\": [\n        \"snowplow-a\"\n    ],\n       \"editor\": [\n        \"{{belt_edit_perm}}\"\n    ],\n    \"viewer\": [\n\t     \"{{belt_view_perm}}\"\n    ],\n    \"assumedRole\": \"updated\"\n}"
										},
										"url": {
											"raw": "{{belt_url}}/belts/{{belt_id}}",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts",
												"{{belt_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete belt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1d0f7156-1bb9-4598-ba46-34f6f787d37e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4cb8fbc9-b7a6-4f7a-84f8-bb1715d6dda1",
												"exec": [
													"",
													"var json = pm.response.json();",
													"pm.test(\"Belt successfully deleted\", function() {",
													"      pm.expect(json.content).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{belt_url}}/belts/{{belt_id}}",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts",
												"{{belt_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get specific belt by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cc9077d-aff2-4235-a048-c68a7036c652",
												"exec": [
													"pm.test(\"Status code is 404\", function() {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.globals.set(\"skipCollectionTest\", false);",
													"pm.environment.unset(\"belt_id\");",
													"pm.globals.unset(\"retry_count\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "697f7006-175d-4326-b669-eb89af61f2cc",
												"exec": [
													"pm.globals.set(\"skip_collection_test\", true)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"url": {
											"raw": "{{belt_url}}/belts/{{belt_id}}",
											"host": [
												"{{belt_url}}"
											],
											"path": [
												"belts",
												"{{belt_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}